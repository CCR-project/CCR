
(* This generated code requires the following version of MenhirLib: *)

(* let () =
 *   MenhirLib.StaticVersion.require_20210310 *)

module MenhirBasics = struct
  
  exception Error
  
  type token = 
    | XOR_ASSIGN of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 16 "cparser/pre_parser.ml"
  )
    | WHILE of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 21 "cparser/pre_parser.ml"
  )
    | VOLATILE of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 26 "cparser/pre_parser.ml"
  )
    | VOID of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 31 "cparser/pre_parser.ml"
  )
    | VAR_NAME of (
# 46 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 36 "cparser/pre_parser.ml"
  )
    | UNSIGNED of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 41 "cparser/pre_parser.ml"
  )
    | UNION of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 46 "cparser/pre_parser.ml"
  )
    | UNDERSCORE_BOOL of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 51 "cparser/pre_parser.ml"
  )
    | TYPEDEF_NAME of (
# 46 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 56 "cparser/pre_parser.ml"
  )
    | TYPEDEF of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 61 "cparser/pre_parser.ml"
  )
    | TILDE of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 66 "cparser/pre_parser.ml"
  )
    | SWITCH of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 71 "cparser/pre_parser.ml"
  )
    | SUB_ASSIGN of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 76 "cparser/pre_parser.ml"
  )
    | STRUCT of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 81 "cparser/pre_parser.ml"
  )
    | STRING_LITERAL of (
# 49 "cparser/pre_parser.mly"
      (bool * int64 list * Cabs.loc)
# 86 "cparser/pre_parser.ml"
  )
    | STATIC_ASSERT of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 91 "cparser/pre_parser.ml"
  )
    | STATIC of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 96 "cparser/pre_parser.ml"
  )
    | STAR of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 101 "cparser/pre_parser.ml"
  )
    | SLASH of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 106 "cparser/pre_parser.ml"
  )
    | SIZEOF of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 111 "cparser/pre_parser.ml"
  )
    | SIGNED of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 116 "cparser/pre_parser.ml"
  )
    | SHORT of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 121 "cparser/pre_parser.ml"
  )
    | SEMICOLON of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 126 "cparser/pre_parser.ml"
  )
    | RPAREN of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 131 "cparser/pre_parser.ml"
  )
    | RIGHT_ASSIGN of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 136 "cparser/pre_parser.ml"
  )
    | RIGHT of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 141 "cparser/pre_parser.ml"
  )
    | RETURN of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 146 "cparser/pre_parser.ml"
  )
    | RESTRICT of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 151 "cparser/pre_parser.ml"
  )
    | REGISTER of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 156 "cparser/pre_parser.ml"
  )
    | RBRACK of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 161 "cparser/pre_parser.ml"
  )
    | RBRACE of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 166 "cparser/pre_parser.ml"
  )
    | QUESTION of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 171 "cparser/pre_parser.ml"
  )
    | PTR of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 176 "cparser/pre_parser.ml"
  )
    | PRE_NAME of (
# 45 "cparser/pre_parser.mly"
      (string)
# 181 "cparser/pre_parser.ml"
  )
    | PRAGMA of (
# 50 "cparser/pre_parser.mly"
      (string * Cabs.loc)
# 186 "cparser/pre_parser.ml"
  )
    | PLUS of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 191 "cparser/pre_parser.ml"
  )
    | PERCENT of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 196 "cparser/pre_parser.ml"
  )
    | PACKED of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 201 "cparser/pre_parser.ml"
  )
    | OR_ASSIGN of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 206 "cparser/pre_parser.ml"
  )
    | NORETURN of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 211 "cparser/pre_parser.ml"
  )
    | NEQ of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 216 "cparser/pre_parser.ml"
  )
    | MUL_ASSIGN of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 221 "cparser/pre_parser.ml"
  )
    | MOD_ASSIGN of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 226 "cparser/pre_parser.ml"
  )
    | MINUS of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 231 "cparser/pre_parser.ml"
  )
    | LT of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 236 "cparser/pre_parser.ml"
  )
    | LPAREN of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 241 "cparser/pre_parser.ml"
  )
    | LONG of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 246 "cparser/pre_parser.ml"
  )
    | LEQ of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 251 "cparser/pre_parser.ml"
  )
    | LEFT_ASSIGN of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 256 "cparser/pre_parser.ml"
  )
    | LEFT of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 261 "cparser/pre_parser.ml"
  )
    | LBRACK of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 266 "cparser/pre_parser.ml"
  )
    | LBRACE of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 271 "cparser/pre_parser.ml"
  )
    | INT of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 276 "cparser/pre_parser.ml"
  )
    | INLINE of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 281 "cparser/pre_parser.ml"
  )
    | INC of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 286 "cparser/pre_parser.ml"
  )
    | IF of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 291 "cparser/pre_parser.ml"
  )
    | HAT of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 296 "cparser/pre_parser.ml"
  )
    | GT of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 301 "cparser/pre_parser.ml"
  )
    | GOTO of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 306 "cparser/pre_parser.ml"
  )
    | GEQ of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 311 "cparser/pre_parser.ml"
  )
    | FOR of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 316 "cparser/pre_parser.ml"
  )
    | FLOAT of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 321 "cparser/pre_parser.ml"
  )
    | EXTERN of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 326 "cparser/pre_parser.ml"
  )
    | EQEQ of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 331 "cparser/pre_parser.ml"
  )
    | EQ of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 336 "cparser/pre_parser.ml"
  )
    | EOF
    | ENUM of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 342 "cparser/pre_parser.ml"
  )
    | ELSE of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 347 "cparser/pre_parser.ml"
  )
    | ELLIPSIS of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 352 "cparser/pre_parser.ml"
  )
    | DOUBLE of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 357 "cparser/pre_parser.ml"
  )
    | DOT of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 362 "cparser/pre_parser.ml"
  )
    | DO of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 367 "cparser/pre_parser.ml"
  )
    | DIV_ASSIGN of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 372 "cparser/pre_parser.ml"
  )
    | DEFAULT of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 377 "cparser/pre_parser.ml"
  )
    | DEC of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 382 "cparser/pre_parser.ml"
  )
    | CONTINUE of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 387 "cparser/pre_parser.ml"
  )
    | CONSTANT of (
# 48 "cparser/pre_parser.mly"
      (Cabs.constant * Cabs.loc)
# 392 "cparser/pre_parser.ml"
  )
    | CONST of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 397 "cparser/pre_parser.ml"
  )
    | COMMA of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 402 "cparser/pre_parser.ml"
  )
    | COLON of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 407 "cparser/pre_parser.ml"
  )
    | CHAR of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 412 "cparser/pre_parser.ml"
  )
    | CASE of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 417 "cparser/pre_parser.ml"
  )
    | BUILTIN_VA_ARG of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 422 "cparser/pre_parser.ml"
  )
    | BUILTIN_OFFSETOF of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 427 "cparser/pre_parser.ml"
  )
    | BREAK of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 432 "cparser/pre_parser.ml"
  )
    | BARBAR of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 437 "cparser/pre_parser.ml"
  )
    | BAR of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 442 "cparser/pre_parser.ml"
  )
    | BANG of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 447 "cparser/pre_parser.ml"
  )
    | AUTO of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 452 "cparser/pre_parser.ml"
  )
    | ATTRIBUTE of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 457 "cparser/pre_parser.ml"
  )
    | ASM of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 462 "cparser/pre_parser.ml"
  )
    | AND_ASSIGN of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 467 "cparser/pre_parser.ml"
  )
    | ANDAND of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 472 "cparser/pre_parser.ml"
  )
    | AND of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 477 "cparser/pre_parser.ml"
  )
    | ALIGNOF of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 482 "cparser/pre_parser.ml"
  )
    | ALIGNAS of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 487 "cparser/pre_parser.ml"
  )
    | ADD_ASSIGN of (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 492 "cparser/pre_parser.ml"
  )
  
end

include MenhirBasics

let _eRR =
  MenhirBasics.Error

# 25 "cparser/pre_parser.mly"
  
  open Pre_parser_aux

  let set_id_type (_,r,_) t =
    r := t

  let declare_varname (i,_,_) =
    !declare_varname i

  let declare_typename (i,_,_) =
    !declare_typename i

  type 'id fun_declarator_ctx =
  | Decl_ident
  | Decl_other
  | Decl_fun of (unit -> unit)
  | Decl_krfun of 'id


# 522 "cparser/pre_parser.ml"

module Tables = struct
  
  include MenhirBasics
  
  let token2terminal : token -> int =
    fun _tok ->
      match _tok with
      | ADD_ASSIGN _ ->
          97
      | ALIGNAS _ ->
          96
      | ALIGNOF _ ->
          95
      | AND _ ->
          94
      | ANDAND _ ->
          93
      | AND_ASSIGN _ ->
          92
      | ASM _ ->
          91
      | ATTRIBUTE _ ->
          90
      | AUTO _ ->
          89
      | BANG _ ->
          88
      | BAR _ ->
          87
      | BARBAR _ ->
          86
      | BREAK _ ->
          85
      | BUILTIN_OFFSETOF _ ->
          84
      | BUILTIN_VA_ARG _ ->
          83
      | CASE _ ->
          82
      | CHAR _ ->
          81
      | COLON _ ->
          80
      | COMMA _ ->
          79
      | CONST _ ->
          78
      | CONSTANT _ ->
          77
      | CONTINUE _ ->
          76
      | DEC _ ->
          75
      | DEFAULT _ ->
          74
      | DIV_ASSIGN _ ->
          73
      | DO _ ->
          72
      | DOT _ ->
          71
      | DOUBLE _ ->
          70
      | ELLIPSIS _ ->
          69
      | ELSE _ ->
          68
      | ENUM _ ->
          67
      | EOF ->
          66
      | EQ _ ->
          65
      | EQEQ _ ->
          64
      | EXTERN _ ->
          63
      | FLOAT _ ->
          62
      | FOR _ ->
          61
      | GEQ _ ->
          60
      | GOTO _ ->
          59
      | GT _ ->
          58
      | HAT _ ->
          57
      | IF _ ->
          56
      | INC _ ->
          55
      | INLINE _ ->
          54
      | INT _ ->
          53
      | LBRACE _ ->
          52
      | LBRACK _ ->
          51
      | LEFT _ ->
          50
      | LEFT_ASSIGN _ ->
          49
      | LEQ _ ->
          48
      | LONG _ ->
          47
      | LPAREN _ ->
          46
      | LT _ ->
          45
      | MINUS _ ->
          44
      | MOD_ASSIGN _ ->
          43
      | MUL_ASSIGN _ ->
          42
      | NEQ _ ->
          41
      | NORETURN _ ->
          40
      | OR_ASSIGN _ ->
          39
      | PACKED _ ->
          38
      | PERCENT _ ->
          37
      | PLUS _ ->
          36
      | PRAGMA _ ->
          35
      | PRE_NAME _ ->
          34
      | PTR _ ->
          33
      | QUESTION _ ->
          32
      | RBRACE _ ->
          31
      | RBRACK _ ->
          30
      | REGISTER _ ->
          29
      | RESTRICT _ ->
          28
      | RETURN _ ->
          27
      | RIGHT _ ->
          26
      | RIGHT_ASSIGN _ ->
          25
      | RPAREN _ ->
          24
      | SEMICOLON _ ->
          23
      | SHORT _ ->
          22
      | SIGNED _ ->
          21
      | SIZEOF _ ->
          20
      | SLASH _ ->
          19
      | STAR _ ->
          18
      | STATIC _ ->
          17
      | STATIC_ASSERT _ ->
          16
      | STRING_LITERAL _ ->
          15
      | STRUCT _ ->
          14
      | SUB_ASSIGN _ ->
          13
      | SWITCH _ ->
          12
      | TILDE _ ->
          11
      | TYPEDEF _ ->
          10
      | TYPEDEF_NAME _ ->
          9
      | UNDERSCORE_BOOL _ ->
          8
      | UNION _ ->
          7
      | UNSIGNED _ ->
          6
      | VAR_NAME _ ->
          5
      | VOID _ ->
          4
      | VOLATILE _ ->
          3
      | WHILE _ ->
          2
      | XOR_ASSIGN _ ->
          1
  
  and error_terminal =
    0
  
  and token2value : token -> Obj.t =
    fun _tok ->
      match _tok with
      | ADD_ASSIGN _v ->
          Obj.repr _v
      | ALIGNAS _v ->
          Obj.repr _v
      | ALIGNOF _v ->
          Obj.repr _v
      | AND _v ->
          Obj.repr _v
      | ANDAND _v ->
          Obj.repr _v
      | AND_ASSIGN _v ->
          Obj.repr _v
      | ASM _v ->
          Obj.repr _v
      | ATTRIBUTE _v ->
          Obj.repr _v
      | AUTO _v ->
          Obj.repr _v
      | BANG _v ->
          Obj.repr _v
      | BAR _v ->
          Obj.repr _v
      | BARBAR _v ->
          Obj.repr _v
      | BREAK _v ->
          Obj.repr _v
      | BUILTIN_OFFSETOF _v ->
          Obj.repr _v
      | BUILTIN_VA_ARG _v ->
          Obj.repr _v
      | CASE _v ->
          Obj.repr _v
      | CHAR _v ->
          Obj.repr _v
      | COLON _v ->
          Obj.repr _v
      | COMMA _v ->
          Obj.repr _v
      | CONST _v ->
          Obj.repr _v
      | CONSTANT _v ->
          Obj.repr _v
      | CONTINUE _v ->
          Obj.repr _v
      | DEC _v ->
          Obj.repr _v
      | DEFAULT _v ->
          Obj.repr _v
      | DIV_ASSIGN _v ->
          Obj.repr _v
      | DO _v ->
          Obj.repr _v
      | DOT _v ->
          Obj.repr _v
      | DOUBLE _v ->
          Obj.repr _v
      | ELLIPSIS _v ->
          Obj.repr _v
      | ELSE _v ->
          Obj.repr _v
      | ENUM _v ->
          Obj.repr _v
      | EOF ->
          Obj.repr ()
      | EQ _v ->
          Obj.repr _v
      | EQEQ _v ->
          Obj.repr _v
      | EXTERN _v ->
          Obj.repr _v
      | FLOAT _v ->
          Obj.repr _v
      | FOR _v ->
          Obj.repr _v
      | GEQ _v ->
          Obj.repr _v
      | GOTO _v ->
          Obj.repr _v
      | GT _v ->
          Obj.repr _v
      | HAT _v ->
          Obj.repr _v
      | IF _v ->
          Obj.repr _v
      | INC _v ->
          Obj.repr _v
      | INLINE _v ->
          Obj.repr _v
      | INT _v ->
          Obj.repr _v
      | LBRACE _v ->
          Obj.repr _v
      | LBRACK _v ->
          Obj.repr _v
      | LEFT _v ->
          Obj.repr _v
      | LEFT_ASSIGN _v ->
          Obj.repr _v
      | LEQ _v ->
          Obj.repr _v
      | LONG _v ->
          Obj.repr _v
      | LPAREN _v ->
          Obj.repr _v
      | LT _v ->
          Obj.repr _v
      | MINUS _v ->
          Obj.repr _v
      | MOD_ASSIGN _v ->
          Obj.repr _v
      | MUL_ASSIGN _v ->
          Obj.repr _v
      | NEQ _v ->
          Obj.repr _v
      | NORETURN _v ->
          Obj.repr _v
      | OR_ASSIGN _v ->
          Obj.repr _v
      | PACKED _v ->
          Obj.repr _v
      | PERCENT _v ->
          Obj.repr _v
      | PLUS _v ->
          Obj.repr _v
      | PRAGMA _v ->
          Obj.repr _v
      | PRE_NAME _v ->
          Obj.repr _v
      | PTR _v ->
          Obj.repr _v
      | QUESTION _v ->
          Obj.repr _v
      | RBRACE _v ->
          Obj.repr _v
      | RBRACK _v ->
          Obj.repr _v
      | REGISTER _v ->
          Obj.repr _v
      | RESTRICT _v ->
          Obj.repr _v
      | RETURN _v ->
          Obj.repr _v
      | RIGHT _v ->
          Obj.repr _v
      | RIGHT_ASSIGN _v ->
          Obj.repr _v
      | RPAREN _v ->
          Obj.repr _v
      | SEMICOLON _v ->
          Obj.repr _v
      | SHORT _v ->
          Obj.repr _v
      | SIGNED _v ->
          Obj.repr _v
      | SIZEOF _v ->
          Obj.repr _v
      | SLASH _v ->
          Obj.repr _v
      | STAR _v ->
          Obj.repr _v
      | STATIC _v ->
          Obj.repr _v
      | STATIC_ASSERT _v ->
          Obj.repr _v
      | STRING_LITERAL _v ->
          Obj.repr _v
      | STRUCT _v ->
          Obj.repr _v
      | SUB_ASSIGN _v ->
          Obj.repr _v
      | SWITCH _v ->
          Obj.repr _v
      | TILDE _v ->
          Obj.repr _v
      | TYPEDEF _v ->
          Obj.repr _v
      | TYPEDEF_NAME _v ->
          Obj.repr _v
      | UNDERSCORE_BOOL _v ->
          Obj.repr _v
      | UNION _v ->
          Obj.repr _v
      | UNSIGNED _v ->
          Obj.repr _v
      | VAR_NAME _v ->
          Obj.repr _v
      | VOID _v ->
          Obj.repr _v
      | VOLATILE _v ->
          Obj.repr _v
      | WHILE _v ->
          Obj.repr _v
      | XOR_ASSIGN _v ->
          Obj.repr _v
  
  and default_reduction =
    (16, "\000\187\000\001\000\000\001I\001J\001R\001<\001S\000\176\000\000\001;\001.\001Q\001L\001H\0010\000\000\001Y\000\000\000\000\001e\0011\001b\000\000\000\000\001\000\001c\001d\000\000\000\000\000\000\001N\001M\000\000\000\000\001O\000\000\000\000\000\000\000\000\000\000\000\153\000\151\000\150\000\152\000\149\000\000\000\000\000\000\001\001\000\000\000\000\000\000\000\000\001P\001K\000\229\000\230\000\000\001G\000\000\000\000\001f\001a\000\000\000\000\000\185\000\000\001\"\001#\001T\000\000\000\000\000\000\0015\000\000\000\000\000\000\000\000\000:\000\000\0012\000\245\000\000\000\000\000\252\000\000\000\000\000,\000(\000*\000-\000$\000&\000)\000#\000%\000+\000'\000\000\000\000\001\025\001\024\000\000\000\000\000\196\000\197\000\198\000\000\000\195\000\194\000\000\000\n\000\011\000\000\000\000\000\000\001\006\001\b\001\007\001\tc\000\000\000b\001\018\000\000\000\000\000\229\000\000\000\000\001\018\000\000\000\000\000\154\000\142\000\141\001-\001/\000\176\000\000\000\178\000\177\000\179\000\180\000\181\000\000\000L\000I\000H\000K\000\182\000J\000\000\000\000\001\014\000\000\001\016\000\000\001\017\001\015\000\000\000\176\000\000\000\181\000\000\001\018\000?\000\000\000\000\000\244\000\242\000\000\000\000\000\000\000\000\000\241\000\000\000\229\000\000\000\233\000o\000\000\000\234\000\000\000\229\000\000\000\000\000\000\000\000\000\000\000q\000\210\000r\000\000\000\229\000\000\000t\000\000\000\000\000a\000\000\0003\000\000\000s\000\000\000n\000\000\000p\000\240\000\000\000\229\000\000\000\000\000\000\000\239\000g\000\202\000\000\000v\000\000\000\000\000\000\000\155\000\000\000u\000\000\000\000\001:\000\000\000\000\0018\000\000\0019\000\000\0013\000\000\000\000\000\000\000\229\000\000\000\185\000\000\000\000\001`\000\000\000\000\000\000\000\000\000\229\000\000\001D\000\204\000\000\0001\000\000\0000\000\000\000\000\000\000\000\249\000\000\000\000\000\000\000k\000\000\000l\000m\000\000\000\250\000\000\000\000\000\000\000\248\001\\\000\000\000\000\000\000\000\146\000\000\000\145\000\000\000\000\000.\000\000\000\148\000\147\000\000\000\000\000\000\000z\000\000\000\000\000i\000\000\000\000\000|\000~\000\000\000x\000}\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\164\0008\000\000\000jf\001W\000\000\000A\000\000\000\000\000@\000\000\000\000\000\162\001\018\000\000\000\000\000\000\000\160\000h\000\161\000\137\000\000\000\000\000w\000\000\001\019\000\000\000\000\000\000\000\000\000\000\000\166\000\175\000\000\0005\0004\0007\000\208\000\138\001?\000\000\000\000\000D\000\000\000\000\000C\001\018\000\000\000\176\000\000\000\181\000\000\000\000\000\176\000\000\000\181\000\000\000F\000\000\000\000\000\172\000\000\000G\000\000\000\139\000\000\001@")
  
  and error =
    (98, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\186,p\195(\016`3 $\006\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\224\145\131\b\160A\128\196\128\144\024 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000D\160\000\160(\004\000\000Pb\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\160\000\160(\004\000\000Pb\012\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\147.\b*\011\005\002\018\022X\163\129\016\000\000\000\000\000\000\000\000\000\000\001\1852\224\130\160\176P!!e\1388\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004J\000\n\002\128@\000\005\006 \193\1852\224\130\160\176P!!eb\000\000 \000\000\000\016\000\000\000D\162\000\160(\004\000\000Pb\012\000\017(\000(\n\001\000\000\020\024\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000D\160\000\160(\004\000\000Pb\012\000\000\000\000\000\002\000\000\000\000\000\000\006\224\129\130\b\128A\000\132\128\144\b \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\255\255\255\255\255\255\255\255\255\255\255\252\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\006\228\203\130\n\130\193@\132\133\150(\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\006\224\129\130\b\128A\000\132\128\144\b \000\000\000\000\000\000\000\000\000\000\000\001\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000 \000\b\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000n\n\024$\136\004\016\bH\t\000\130\000\000\000\000\000\002\000\000\000\000\000\000\000\004J\000\nb\012\127\255\255\255\255\255\255\255\255\255\255\255\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\160\000\160(\004\000\000Pb\012\127\255\255\255\255\255\255\255\255\255\255\255\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017(\000(\nn\002\128@\000\005\006 \199\255\255\255\255\255\255\255\255\255\255\255\253\255\255\255\255\255\255\255\255\255\255\255\255\127\255\255\255\255\255\255\255\255\255\255\255\192\004J\000\n\002\128@\000\005\006 \199\255\255\255\255\255\255\255\255\255\255\255\252\000D\160\000\160(\004\000\000Pb\012\127\255\255\255\255\255\255\255\255\255\255\255\192\004J\000\n\002\128@\000\005\006 \199\255\255\255\255\255\255\255\255\255\255\255\252\000D\160\000\160(\004\000\000Pb\012\127\255\255\255\255\255\255\255\255\255\255\255\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\160\000\160(\004\000\000Pb\012\127\255\255\255\255\255\255\255\255\255\255\255\223\255\255\255\255\255\255\255\255\255\255\255\240\001\018\128\002\128\160\016\000\001A\1361\255\255\255\255\255\255\255\255\255\255\255\255\127\255\255\255\255\255\255\255\255\255\255\255\223\255\255\255\255\255\255\255\255\255\255\255\247\255\255\255\255\255\255\255\255\255\255\255\252\000\000\000\000\000\000\000\000\000\006\000\000\000\017(\000(\n\001\000\000\020\024\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\160\000\160(\004\000\000Pb\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\018\128\002\128\160\016\000\001A\1361\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\001\000\000\000\004J\000\n\002\128@\000\005\006 \192\000\000\000\000\000\000\000\000\000\000\000\000\000D\160\000\160(\004\000\000Pb`\130 \016@! $\002\b\000\000\000\000\000\000\000\000\000\000\000\000\127\255\255\255\255\255\255\255\255\255\255\255\192\000\000\000\000\000\000\000\000\000\000\000\007\255\255\255\255\255\255\255\255\255\255\255\252\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b@\b\000\128\000\000\000 \000\000D\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\128\b\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\002\000\130  \000\000\000 \002\t\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\006\224\145\163\b\160A\128\196\128\144\024 D\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\024#\b\160\132\128@\000\192\024 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000n\t\1540\138\012X\012H\r`\002\000\016@! \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000`\140\"\130\018\001\000\003\000`\128\000\000\000\000\000\000\000\000\000\000\000\001\184&h\194(1`1 4\006\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000@\000\001\184$`\194(\016`1`$\006\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b \b\000\132\000\000\000@\000\001\184&h\194(1`1 $\006\bn\t\1520\138\012X\012H\t\001\130\004@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\017(\n*\n\001\000\000\022\024\163\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\255\255\255\255\255\255\255\255\255\255\255\255\127\255\255\255\255\255\255\255\255\255\255\255\198\224\145\163\b\160A\128\196\128\144\024!\184$`\194(\016`1 $\006\bbb\000\000\000D\160\000\160(\004\000\000Pb\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\002\000\128\000\000\000\000\128\b'\255\255\255\255\255\255\255\255\255\255\255\252n\b\024 \136\004\016\bH\t\000\130\000\000\000\000\000\000\000\000\000\000\000\000\031\255\255\255\255\255\255\255\255\255\255\255\240\000\000\000\000\000\000\000\000\000\000\000\001\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\255\255\255\255\255\255\255\255\255\255\255\252n\t\1540\138\012X\012H\t\001\130\027\130f\012\"\131\022\003\018\002@`\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\128\000\000\016\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\016\000\000\000\000D\160\000\160(\004\000\000Pb\012\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\004\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\027\130\006\b\"\001\004\002\018\002@ \128\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\004J\000\n\002\128@\000\005\006 \192\000\000\b\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\016\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \b\128\000\000\000\000\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\b\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\001\000\000\000\000\000\000H\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\001\000\004\000\000\000\017(\000(\n\001\000\000\020\024\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\255\255\255\255\255\255\255\255\255\255\255\252\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\004J\000\n\002\134@\000E\006 \192\001\018\128\002\128\160\144\000\001A\1360\000D\160\000\160(d\000\004Pbbb\000\000\000\000\000\000\000\000\000\000\000\000\027\130g\012\"\131\006\003\018\002@`\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\b\024C\b\160\128\128@\000\128\024 \000\000\000\000\000\000\000\000\000\000\000\000@\001\1320\138\b\b\004\000\b\001\130\000\000\000\000\000\000\000\000\000\000\000\000\006\232\153\195\b\160\193\128\196\128\144\024 \000\000\000\000\000\000\000\000\000\000\000\000n\t\1560\138\012\024\012H\t\001\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\186 `\002\000\016@! \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\130F\012\"\129\006\003\018\002@`\128\000\000\000\000\000\000\000\000\000\000\000\001\000\006\016\194(  \016\000 \006\b\000\000\000\000\000\000\000\000\000\000\000\000\027\130g\012\"\131\006\003\018\002@`\128\000\000\000\000\000\000\000\000\000\000\000\001\002\006\016\194(  \016\000 \006\b\000\000\000\000\000\000\000\000\000\000\000\000\016\000a\012\"\130\002\001\000\002\000`\128\000\000\000\000\000\000\000\000\000\000\000\001\186&p\194(0`1 $\006\b\000\000\000\000\000\000\000\000\000\000\000\000\027\130g\012\"\131\006\003\018\002@`\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000;\187\239\029:\139\015\151\018\190|\243\128\004J@\n\002\128@\000\005\006 \192\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\000\000\000\000\000\000\000\000\000\000\001\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\006JD\n\002\130e\000/\015$\192\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017(\000(\n\001\000\000\020\024\131\000\000\000\000\000\000\000\000\000\000 \000\002\001\146\145\002\128\160\153@\011\195\2010\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\128\000\000\000\128\000\001\000\000\000\000\000 \000\000\000 \000\000@\000\000\000\000\b\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\001\000\128\000\000\000\000\000\000\128\000\031\255\255\255\255\255\255\255\255\255\255\255\240\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\bb\000\000\000\000\000\000\016\000\000\000\004\000\000\000\000\000\000\000\000\000\000\127\255\255\255\255\255\255\255\255\255\255\255\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128 \000\000\000\000\"\016\002\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\004J\000\n\002\128@\000\005\006 \192\000\000\b\000\000\000\000\000\000\016\000\000\128d\164@\160(&P\002\240\242L\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\128d\164@\160(&P\002\240\242L\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\004J\000\n\002\128@\000\005\006 \192\000\000\b\000\000\000\000\000\000\016\000\000\128d\164@\160(&P\002\240\242L\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\001\018\128\002\128\160\016\000\001A\1360\000\000\002\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\006JD\n\002\130e\000/\015$\199\255\255\255\255\255\255\255\255\255\255\255\252\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\006\236\251\195\n\162\193\192\196\133\1508\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016 a\012\"\130\002\001\000\002\000`\128\000\000\000\000\000\000\000\000\000\000\000\001\186&p\194(0`1 $\006\b\000\000\000\000\000\000\000\000\000\000\000\000\011\162\006\000 \001\004\002\018\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\001\002\006\016\194(  \016\000 \006\b\000\000\000\000\000\000\000\000\000\000\000\000\027\162g\012\"\131\006\003\018\002@`\128\000\000\000\000\000\000\000\000\000\000\000\000\001\018\144\002\128\160\016\000\001A\1360\000D\162\000\160(\004\000\000Pb\012\000\000\000\000\000\000\000\000\000\000\000\000\b\006JD\n\002\130e\000/\015$\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\128\b\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\001\000\000\000\000\b\000\bn\002\130@\000\005\006 \192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\128d\164@\160(&P\002\240\242L\000\000\000\000\000\000\000\000\000\000\000\000\b\006JD\n\002\130e\000/\015$\192\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\004J\000\n\002\128@\000\005\006 \192\000\000\b\000\000\000\000\000\000\016\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\002\006\016\194(  \016\000(\006\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b@\b\000\128\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\000 \002\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\255\255\255\255\255\255\255\255\255\255\255\192\000\000\000\000\000\000\000\000\000\000\000\001\000\006\016\194(  \016\000 \006\b\000\000\000\000\000\000\000\000\000\000\000\000\027\130g\012\"\131\006\003\018\002@`\130\224\129\128\b\000A\000\132\128\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\001\1320\138\b\b\004\000\b\001\130\000\000\000\000\000\000\000\000\000\000\000\000\006\224\153\195\b\160\193\128\196\128\144\024 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\128\b\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\184$`\194(\016\2241 $\006\b\000\000\000\000\000\000\000\000\000\000\000\000\127\255\255\255\255\255\255\255\255\255\255\255\192\000\000\000\000\000\000\000\000\000\000\000\001\184$p\194(\016\2245 4\006\b\000\000\000\000\000\000\000\000\000\000\000\000")
  
  and start =
    1
  
  and action =
    ((16, "\000\000\000\000-b\000\000\000\000\000\000\000\000\000\000\000\000)\172\000\000\000\000\000\000\000\000\000\000\000\000+&\000\000+\018,\226\000\000\000\000\000\000:$+v\000\000\000\000\000\000,\166+v,\166\000\000\000\000:B,\166\000\000\000\003+F+T+\236,\020\000\000\000\000\000\000\000\000\000\000+d+\234:B\000\000+p,\226,\0006\012\000\000\000\000\000\000\000\000\000\192\000\000,\018,\166\000\000\000\000,H6\012\000\000\001\130\000\000\000\000\000\000\000\003+\026,\148\000\0006\012,\172,\226,\226\000\000\002D\000\000\000\000\003\006+\026\000\000,\226\003\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000,\226\004\138\000\000\000\000,\226\005L\000\000\000\000\000\000,\226\000\000\000\000\006\014\000\000\000\000,\226\006\208\007\146\000\000\000\000\000\000\000\000,\226\bT\t\022\t\216,\226\n\154,\226\011\\,\226\012\030,\226\012\224\000\000\000\000,\226\r\162\014d,\226\015&\015\232\016\170\017l*\240,\226\000\000\000\000,\226\000\000\000\000,\226\018.\000\000,\232\000\000\000\000+\024,\226\000\000,\226+V\000\000\000\000+\026\000\000\000\000\000\000,|+.,\014,\242\000\000\000\000\000\000\018\240\000\000\000\000\000\000\019\178\000\000\000\000\000\0006X\000\000\020t\000\000\0216\000\000\000\000+\138,\022\000\000-\030\000\000\000\000+\028-\020\000\000.8\021\248\000\0005\020,@\000\000\000\000\000\000\000\000\000\000\000\0006\236\000\000\000\000\000\000\000\000\000\000.\002\000\000\000\000\000\000\000\000\000\000\000\000\022\186\023|\000\000\024>\000\000\025\000\000\000\000\000)\172\000\0007J\000\000.\162\000\000\000\000+\212-b\000\000\000\000,\028/B2l,\132\000\000,\246\000\0005P\000\000\000\000-\"\000\000-t\000\000\025\194\026\132/B)\172-r\000\000\000\000\000\000\027F\000\0005P\000\000\028\b\000\003\000\000\000\003\000\000-t\000\000-\128\000\000-\132\000\000\000\000-\146\000\000\028\202\029\140\030N\000\000\000\000\000\000-\136\000\000,\004-v-\178\000\000-\146\000\000,<+\028\000\000-$,\226\000\000+<\000\000-\162\000\000\000\192\031\0166X\000\000\031\210\000\000 \148-\162\000\000!V/B-b-\176\000\000\"\024\000\000\000\000-\166\000\000,D\000\000-:+\026+\130\000\000,:,\226-\160\000\000+\026\000\000\000\000,2\000\000-F6\012-\186\000\000\000\000-T,\226,J\000\000-\196\000\000,N-\198\000\000+\236\000\000\000\000+\026-\144+\026\000\000, ,\182\000\000,\018,\226\000\000\000\000-\188\000\000\000\000\"\218-\204#\1566b,\2266b,\1506b,\226\000\000\000\000*\238\000\000\000\000-\194\000\000\000\000,\150-\200\000\000,\168\000\000\000\000-\2205P\000\000-\232#\156\000\000,\180\000\000\000\000:\138\000\0002\238\000\000\000\000\000\000\000\0007\250\000\000:\216\000\000/\196\000\0003p\000\000\000\0006\012\000\000)\172\000\000;\020\000\0003\242\000\0008L\000\000;b\000\0000F\000\0004t\000\000,\180\000\000+.8|-\242\000\000+V\000\000-\012$^\000\000+\026-\250\000\000-\138+..\002\000\000,\226-\148+..\b\000\000+\160+\160+\160\000\000\000\000-\220+.,<% +\026.\004\000\000%\226% \000\000+.+D,\226,\182\000\000,\150% ,\192+.&\164,\220+.'f\000\000.\018.\022\000\000\000\000\000\000,\180-\236,\226,\248+.\000\000.\028\000\000\000\000\000\000\000\000-\172+.\000\000\000\000\000\000\000\000-\244,\226-(+.\000\000-\248,\226-<\000\000+.((\000\000-\250+\234\000\000\000\0008\230\000\0000\200\000\0006\012\000\00098\000\0001J\000\0009h9\158\000\000+.\000\000-D\000\000-R\000\000, -|+\028\000\000\000\000\000\000\000\000.*\000\000,\178.,\000\000-~+\028\000\000\000\000\000\003(\234,\226\000\000\000\000\000\000\000\000-\210+.\000\000+.\000\000.`.\n,\226-d.<\000\000\000\0007\168\000\000\000\000\000\000\000\000\000\000\000\000, .D\000\000,\178.F\000\000\000\000)\172\000\0008\230\000\0000\200)\172\000\00098\000\0001J\000\000,\178.H\000\000-b\000\000*nu\004u\000\014\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\000:\004u\004u\004u\004u\004u\004u\004u\004u\004u\000J\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\000\238\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\004u\000\150\004u\004u\004u\004u\004u\000\242\004u\004}\004}\000\014\000\018\004}\000\022\000\026\000\030\004}\004}\004}\004}\004}\000*\004}\004}\004}\004}\004}\004}\0002\0006\004}\004}\004}\004}\004}\000:\004}\004}\004}\004}\004}\004}\004}\004}\004}\000J\004}\004}\004}\004}\004}\004}\004}\004}\000~\004}\004}\004}\004}\004}\000\130\004}\004}\004}\004}\004}\004}\004}\004}\000\142\004}\004}\004}\004}\000\146\004}\004}\000\218\004}\004}\004}\004}\004}\004}\004}\000\238\004}\004}\000\222\004}\004}\004}\004}\004}\004}\004}\004}\000\150\004}\004}\004}\004}\004}\000\242\004}e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\001R\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\001Z\005e\005e\005e\005e\002~\005e\005e\005e\002\138\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\002\142\005e\005e\005e\002\150\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\005e\001b\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\001f\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\001j\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\001n\000\229\000\229\001r\001v\000\229\000\229\000\229\000\229\000\229\001z\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\001~\000\229\000\229\000\229\000\229\000\229\000\229\000\229\001\130\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\000\229\001\134\000\229\000\229\000\229\000\229\001\138\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\001\150\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\001\154\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\r\004\ru\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002\014\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002u\002ur\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002*\002\r\002\r\002\r\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\002\022\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\002\026\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\0001\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002\t\002*\002\t\002\t\002\t\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002\014\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002q\002qe\004e\000\014\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\000:\004e\004e\004e\004e\004e\004e\004e\004e\004e\000J\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\000\238\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\004e\000\150\004e\004e\004e\004e\004e\000\242\004e\004m\004m\000\014\000\018\004m\000\022\000\026\000\030\004m\004m\004m\004m\004m\000*\004m\004m\004m\004m\004m\004m\0002\0006\004m\004m\004m\004m\004m\000:\004m\004m\004m\004m\004m\004m\004m\004m\004m\000J\004m\004m\004m\004m\004m\004m\004m\004m\000~\004m\004m\004m\004m\004m\000\130\004m\004m\004m\004m\004m\004m\004m\004m\000\142\004m\004m\004m\004m\000\146\004m\004m\000\218\004m\004m\004m\004m\004m\004m\004m\000\238\004m\004m\000\222\004m\004m\004m\004m\004m\004m\004m\004m\000\150\004m\004m\004m\004m\004m\000\242\004m\004i\004i\000\014\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\000:\004i\004i\004i\004i\004i\004i\004i\004i\004i\000J\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\000\238\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\004i\000\150\004i\004i\004i\004i\004i\000\242\004i\004q\004q\000\014\000\018\004q\000\022\000\026\000\030\004q\004q\004q\004q\004q\000*\004q\004q\004q\004q\004q\004q\0002\0006\004q\004q\004q\004q\004q\000:\004q\004q\004q\004q\004q\004q\004q\004q\004q\000J\004q\004q\004q\004q\004q\004q\004q\004q\000~\004q\004q\004q\004q\004q\000\130\004q\004q\004q\004q\004q\004q\004q\004q\000\142\004q\004q\004q\004q\000\146\004q\004q\000\218\004q\004q\004q\004q\004q\004q\004q\000\238\004q\004q\000\222\004q\004q\004q\004q\004q\004q\004q\004q\000\150\004q\004q\004q\004q\004q\000\242\004q\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\003\"\001\145\001\145\001\145\001\145\004\"\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\001\145\004)\004)\000\014\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\000.\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\000:\000>\004)\004)\004)\004)\004)\004)\004)\004)\000J\004)\0032\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\0036\004)\004)\004)\004)\004)\004)\004)\004)\003:\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\000\238\004)\004)\004)\004)\004)\004)\004)\004)\004)\004)\003>\000\150\004)\004)\004)\004)\004)\000\242\004)\004%\004%\000\014\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\000.\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\000:\000>\004%\004%\004%\004%\004%\004%\004%\004%\000J\004%\0032\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\0036\004%\004%\004%\004%\004%\004%\004%\004%\003:\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\000\238\004%\004%\004%\004%\004%\004%\004%\004%\004%\004%\003>\000\150\004%\004%\004%\004%\004%\000\242\004%\004-\004-\000\014\004-\004-\004-\004-\004-\004-\004-\004-\004-\004-\004-\004-\004-\000.\004-\004-\004-\004-\004-\004-\004-\004-\004-\004-\000:\000>\004-\004-\004-\004-\004-\004-\004-\004-\000J\004-\0032\004-\004-\004-\004-\004-\004-\004-\004-\004-\004-\004-\004-\004-\0036\004-\004-\004-\004-\004-\004-\004-\004-\003:\004-\004-\004-\004-\004-\004-\004-\004-\004-\004-\004-\004-\004-\004-\000\238\004-\004-\004-\004-\004-\004-\004-\004-\004-\004-\003>\000\150\004-\004-\004-\004-\004-\000\242\004-\0041\0041\000\014\0041\0041\0041\0041\0041\0041\0041\0041\0041\0041\0041\0041\0041\000.\0041\0041\0041\0041\0041\0041\0041\0041\0041\0041\000:\000>\0041\0041\0041\0041\0041\0041\0041\0041\000J\0041\0032\0041\0041\0041\0041\0041\0041\0041\0041\0041\0041\0041\0041\0041\0036\0041\0041\0041\0041\0041\0041\0041\0041\003:\0041\0041\0041\0041\0041\0041\0041\0041\0041\0041\0041\0041\0041\0041\000\238\0041\0041\0041\0041\0041\0041\0041\0041\0041\0041\003>\000\150\0041\0041\0041\0041\0041\000\242\0041\000\017\000\017\000\014\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\002\221\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000:\000\017\000\017\000\017\000\017\000\017\002\250\000\017\000\017\000\017\000J\000\017\000\017\000\017\000\017\000\017\000\017\000\017\003\202\000\017\000\017\000\017\000\017\003aeea\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\238\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\150\000\005\000\005\000\005\000\005\000\005\000\242\000\005\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\004\006\000\r\000\r\000\r\000\r\003e\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\r\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\004\006\000\t\000\t\000\t\000\t\003e\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\t\000\ty\004y\000\014\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\000:\004y\004y\004y\004y\004y\004y\004y\004y\004y\000J\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\000\238\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\004y\000\150\004y\004y\004y\004y\004y\000\242\004y\004\129\004\129\000\014\000\018\004\129\000\022\000\026\000\030\004\129\004\129\004\129\004\129\004\129\000*\004\129\004\129\004\129\004\129\004\129\004\129\0002\0006\004\129\004\129\004\129\004\129\004\129\000:\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\000J\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\000~\004\129\004\129\004\129\004\129\004\129\000\130\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\000\142\004\129\004\129\004\129\004\129\000\146\004\129\004\129\000\218\004\129\004\129\004\129\004\129\004\129\004\129\004\129\000\238\004\129\004\129\000\222\004\129\004\129\004\129\004\129\004\129\004\129\004\129\004\129\000\150\004\129\004\129\004\129\004\129\004\129\000\242\004\129\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\002\217\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\003)\004\238\003)\003)\003)\003)\003aay\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005\214\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005y\005ya\003\253\003\253\003\253\003\253\003\253\003\253\003\253\003\253\003\253\003\253\003\253\003\253\003\253\003\253\003\253\003\253\003\253\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000a\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\007J\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000m\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\007Z\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000q\000qb\030\004M\004M\004M\004M\004M\004M\004M\004M\004M\004M\004M\004M\004M\004M\004M\004M\004M\004M\004M\004M\004M\004M\004M\004M\004M\004M\004M\004M\004M\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\b\198\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\000\197\000\197\000\014\000\018\000\197\000\022\000\026\000\030\000\197\000\197\000\197\000\197\000\197\000*\000\197\000\197\000.\000\197\000\197\000\197\0002\0006\000\197\000\197\000\197\000\197\000\197\000:\000>\000\197\000\197\000\197\000\197\000B\000\197\000\197\000\197\000J\000\197\0032\000\197\000\197\000\197\000\197\000\197\000\197\000~\000\197\000\197\000\197\000\197\000\197\000\130\0036\000\197\000\197\000\197\000\197\000\197\000\197\000\197\000\142\003:\000\197\000\197\000\197\000\146\000\197\000\197\000\218\000\197\000\197\000\197\000\197\000\197\000\197\000\197\000\238\000\197\000\197\000\222\000\197\000\197\000\197\000\197\000\197\000\197\000\197\003>\000\150\000\197\000\197\000\197\000\197\000\197\000\242\000\197\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\004E\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\b\198\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\002y\004E\000\014\000\018\000F\000\022\000\026\000\030\002\217\000\"\000R\004E\0035\000*\000V\0012\000.\000Z\003]\000^\0002\0006\003i\000\162\002\250\001F\006\214\000:\000>\004\217\006\230\000N\005\250\006\234\006\242\000j\003\n\000J\003]\0032\000f\003\129\003m\000n\000F\000z\000~\002B\002N\002\134\002=\004E\000\130\0036\000\134\004E\007j\000\154\006\246\007*\004E\000\142\003:\002\217\000\158\005&\000\146\002v\003\137\000\218\003I\004E\000\190\007\002\000\194\007\n\000\198\000\238\000\206\002\250\000\222\007\018\000\202\000\210\007\030\004\217\003M\000\250\003>\000\150\007&\003\n\003Y\000\254\001\002\000\242\000\014\000\018\002B\000\022\000\026\000\030\000M\000\"\000R\002=\003\201\000*\000V\0012\000.\000Z\003Y\000^\0002\0006\b*\0031\0029\000\166\002\254\000:\000>\000F\003\001\003I\001F\000v\000\162\000j\003u\000J\000\170\0032\007.\002\170\002\217\000n\002\217\000z\000~\003.\003!\003\153\001\233\000F\000\130\0036\000\134\001F\000\214\003\025\002\250\005J\002\250\000\142\003:\003\141\000=\000\246\000\146\003\186\005\022\000\218\003\202\005n\003\n\005~\000\194\003a\000\198\000\238\000\174\0029\000\222\002\254\000\202\000\210\005\178\000F\003]\000\250\003>\000\150\005.\004\138\001\006\000\254\001\002\000\242\003\145\000\018\001\233\000\022\000\026\000\030\007\178\003!\000R\005\166\003]\000*\000V\000A\005:\000Z\007\242\000^\0002\0006\003\025\002\217\006\030\004\162\007F\003\145\003y\002v\006B\007r\002v\000v\005\134\000j\000E\003\145\003\029\002\250\000R\000\162\001*\000n\000V\000z\000~\000Z\0016\000^\000I\003\n\000\130\0031\000\134\006\238\002j\002\162\006\206\000F\002\174\000\142\b\006\000b\007\190\000j\000\146\b\"\003\006\000\218\005\230\007z\003\022\000n\000\194\000z\000\198\003\145\004E\002B\000\222\005\222\000\202\000\210\000\134\002v\002B\000\250\007\254\003\145\003\222\003\242\007\130\000\254\001\002\003\145\000\014\000\018\b\018\000\022\000\026\000\030\br\000\"\000\194\007\142\000\198\000*\bz\0012\000.\002\217\000\202\000\210\0002\0006\006V\000\250\b\254\002B\003\250\000:\000>\000\254\001\002\004\018\004F\000B\006Z\003\157\003}\000J\004N\0032\004V\004b\004\130\004\142\004\146\004\238\000~\004\154\004\174\002B\003a\002-\000\130\0036\004\194\004\230\004\250\005\014\005\030\002B\0056\000\142\003:\002B\005R\006_\000\146\005Z\003\190\000\218\002B\005f\005v\005\130\005\154\005\194\005\210\000\238\006\006\002B\000\222\006\022\000\014\000\018\006*\000\022\000\026\000\030\003>\000\150\0066\b\134\b\178\000*\006\222\000\242\000.\001Y\006\254\007\006\0002\0006\007\014\001Y\007\026\007\"\007>\000:\000>\000\014\007R\007\158\007\162\001Y\007\182\007\202\007\222\000J\007\246\0032\b\n\b&\b\158\b\170\002\221\001Y\000~\b\222\b\242\b\246\001Y\t\002\000\130\0036\000:\t.\t:\tv\000\000\000\000\002\250\000\142\003:\000\000\000J\000\000\000\146\000\000\000\000\000\218\000\000\000\000\003\n\000\000\000\000\000\000\000\000\000\238\001Y\000\000\000\222\000\000\000\014\000\018\000\000\000\022\000\026\000\030\003>\000\150\000\000\000\000\000\000\000*\000\000\000\242\000.\001]\000\000\000\000\0002\0006\000\000\001]\000\238\000\000\000\000\000:\000>\000\000\000\000\000\000\000\000\001]\000\000\000\000\000\150\000J\000\000\0032\000\000\000\000\000\242\000\000\000\000\001]\000~\000\000\000\000\000\000\001]\000\000\000\130\0036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\003:\000\000\000\000\000\000\000\146\000\000\000\000\000\218\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\238\001]\000\000\000\222\000\000\004E\004E\000\000\004E\004E\004E\003>\000\150\000\000\000\000\000\000\004E\000\000\000\242\004E\004E\000\000\000\000\004E\004E\000\000\003A\000\000\000\000\000\000\004E\004E\000\000\000\000\000\000\000\000\004E\000\000\000\000\000\000\004E\000\000\004E\000\000\000\000\000\000\000\000\000\000\004E\004E\000\000\000\000\000\000\004E\000\000\004E\004E\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004E\004E\000\000\000\000\000\000\004E\000\014\000\018\004E\000\022\000\026\000\030\000\000\006z\000\000\000\000\004E\000*\000\000\004E\000.\001I\000\000\000\000\0002\0006\001I\004E\004E\000\000\000\000\000:\000>\000\000\004E\000\000\000\000\001I\000\000\000\000\000\000\000J\000\000\0032\000\000\000\000\000\000\000\000\000\000\001I\000~\000\000\000\000\000\000\000\000\000\000\000\130\0036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\003:\000\000\000\000\000\000\000\146\000\014\000\018\000\218\000\022\000\026\000\030\000\000\006\190\000\000\000\000\000\238\000*\000\000\000\222\000.\001M\000\000\000\000\0002\0006\001M\003>\000\150\000\000\000\000\000:\000>\000\000\000\242\000\000\000\000\001M\000\000\000\000\000\000\000J\000\000\0032\000\000\000\000\000\000\000\000\000\000\001M\000~\000\000\000\000\000\000\000\000\000\000\000\130\0036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\003:\000\000\000\000\000\000\000\146\000\014\000\018\000\218\000\022\000\026\000\030\000\000\006z\000\000\000\000\000\238\000*\000\000\000\222\000.\0019\000\000\000\000\0002\0006\0019\003>\000\150\000\000\000\000\000:\000>\000\000\000\242\000\000\000\000\0019\000\000\000\000\000\000\000J\000\000\0032\000\000\000\000\000\000\000\000\000\000\0019\000~\000\000\000\000\000\000\000\000\000\000\000\130\0036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\003:\000\000\000\000\000\000\000\146\000\014\000\018\000\218\000\022\000\026\000\030\000\000\006\190\000\000\000\000\000\238\000*\000\000\000\222\000.\001=\000\000\000\000\0002\0006\001=\003>\000\150\000\000\000\000\000:\000>\000\000\000\242\000\000\000\000\001=\000\000\000\000\000\000\000J\000\000\0032\000\000\000\000\000\000\000\000\000\000\001=\000~~\000\000\000\000\000\000\003a\000\000\000\130\0036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\003:\000\000\000\000\000\000\000\146\000\014\000\018\000\218\000\022\000\026\000\030\000\000\000\000\000\000\000\000\000\238\000*\000\000\000\222\000.\001q\000\000\000\000\0002\0006\001q\003>\000\150\000\000\000\000\000:\000>\000\000\000\242\000\000\000\000\001q\000\000\000\000\000\000\000J\000\000\0032\000\000\000\000\000\000\000\000\000\000\001q\000~\000\000\000\000\000\000\000\000\000\000\000\130\0036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\003:\000\000\000\000\000\000\000\146\000\014\000\018\000\218\000\022\000\026\000\030\000\000\000\000\000\000\000\000\000\238\000*\000\000\000\222\000.\001y\000\000\000\000\0002\0006\001y\003>\000\150\000\000\000\000\000:\000>\000\000\000\242\000\000\000\000\001y\000\000\000\000\000\000\000J\000\000\0032\000\000\000\000\000\000\000\000\000\000\001y\000~\000\000\000\000\000\000\000\000\000\000\000\130\0036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\003:\000\000\000\000\000\000\000\146\000\014\000\018\000\218\000\022\000\026\000\030\000\000\000\000\000\000\000\000\000\238\000*\000\000\000\222\000.\001u\000\000\000\000\0002\0006\001u\003>\000\150\000\000\000\000\000:\000>\000\000\000\242\000\000\000\000\001u\000\000\000\000\000\000\000J\000\000\0032\000\000\000\000\000\000\000\000\000\000\001u\000~\000\000\000\000\000\000\000\000\000\000\000\130\0036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\003:\000\000\000\000\000\000\000\146\000\014\000\018\000\218\000\022\000\026\000\030\000\000\000\000\000\000\000\000\000\238\000*\000\000\000\222\000.\001}\000\000\000\000\0002\0006\001}\003>\000\150\000\000\000\000\000:\000>\000\000\000\242\000\000\000\000\001}\000\000\000\000\000\000\000J\000\000\0032\000\000\000\000\000\000\000\000\000\000\001}\000~\000\000\000\000\000\000\000\000\000\000\000\130\0036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\003:\000\000\000\000\000\000\000\146\000\000\000\000\000\218\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\238\000\000\000\000\000\222\000\000\000\014\000\018\000\000\000\022\000\026\000\030\003>\000\150\000\000\000\000\000\000\000*\000\000\000\242\000.\000\000\000\000\000\000\0002\0006\000\000\003q\000\000\000\000\000\000\000:\000>\000\000\000\000\000\000\000\014\003*\000\000\000\000\000\000\000J\000\000\0032\000R\000\000\000\000\000\000\000V\000\000\000~\000Z\000\000\000^\000\000\000\000\000\130\0036\000\000\000\000\000\000\000:\000\000\003\230\000\000\000\142\003:\000b\000\000\000j\000\146\000J\000\000\000\218\000\000\000\000\000\000\000n\000\000\000z~\000\000\000\000\000\000\000\000\000*\000\130\003Q\000\000\000\000\000\000\003Q\0002\0006\003Q\000\142\003Q\000\000\000\000\003\149\000\146\000\000\000\000\000\218\000\000\000B\000\000\003\029\000\000\003\149\003Q\003\145\003Q\000\000\000\222\000\000\000\000\000\000\000~ji\003>\000\150\000\000\000\000\000\000\000\000\0036\000\242\000\000\000\000\000b\000\000\000j\000\000\000\000\003:\000\000\000\000\000\000\000\000\000n\000\000\000z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\238\000\134\000\014\000\000\000\000\000\000\000\000\000\000\000\000\006jb*\003>\000\150\000\000\000\000\000\000\000\000\0036\000\242\000\000\000\000\000b\000\000\000j\000\000\000R\003:\000\000\000\000\000V\000\000\000n\000Z\000z\000^\000\000\000\000\000\000\bb\000\000\000\000\000\238\000\134\000\000\000\000\000\000\000\000\000\000\000b\000\000\000j\000\000\003>\000\150\000\000\000\000\000\000\000\000\000n\000\242\000z\000\000\000\194\000\000\000\198\000\000\000\000\000\000\000\000\000\134\000\202\000\210\000\000\000\000\000\000\000\250\000\000\000\000\000\000\000\000\000\000\000\254\001\002\000\000\000\000\000\000\000\000\000\000\000\000\000\194\000\000\000\198\000R\000\000\000\000\000\000\000V\000\202\000\210\000Z\000\000\000^\000\250\000\000\000\000\000\000\000\000\000R\000\254\001\002\000\000\000V\000\000\000\000\000Z\000b\000^\000j\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000n\000\000\000r\000\000\000\000\000b\000\000\000j\000\000\000\000\000\014\000\134\000\000\000\000\000\000\000n\000\000\000\138\000\000\000\000\000\000\000\000\000\000\000\000\000.\001a\000\134\000\000\000\000\000\000\001a\000\194\000\000\000\198\000\000\000:\000>\000\000\000\000\000\202\000\210\001a\000\000\000\000\000\250\000J\000\194\0032\000\198\000\014\000\254\001\002\000\000\001a\000\202\000\210\000\000\000\000\000\000\000\250\000\000\0036\000\000\000.\001i\000\254\001\002\000\000\000\000\001i\003:\000\000\000\000\000\000\000:\000>\000\000\000\000\000\000\000\014\001i\000\000\000\000\000\000\000J\000\238\0032\000\000\000\000\000\000\000\000\000\000\001i\000.\001e\000\000\003>\000\150\000\000\001e\0036\000\000\000\000\000\242\000:\000>\000\000\000\000\000\000\003:\001e\000\000\000\000\000\000\000J\000\000\0032\000\000\000\014\000\000\000\000\000\000\001e\000\000\000\238\000\000\000\000\000\000\000\000\000\000\0036\000\000\000.\001m\000\000\003>\000\150\000\000\001m\003:\000\000\000\000\000\242\000:\000>\000\000\000\000\000\000\000\000\001m\000\000\000\000\000\000\000J\000\238\0032\000\000\000\000\000\000\000\000\000\000\001m\000\000\000\000\000\000\003>\000\150\000\000\000\000\0036\000\000\000\000\000\242\000\000\000\000\000\000\000\000\000\000\003:\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003>\000\150\000\000\000\000\000\000\000\000\000\000\000\242"))
  
  and lhs =
    (8, "\000\139\139\139\138\138\138\137\137\136\136\135\135\134\134\133\133\133\133\132\132\132\131\131\130\130\129\128\128\127\127~}}|||||||||||{{{{zzyyyxwwvvuttsrrrqqqppooooonnnnmmmmllllkkkkkkkkjiihhgfedcbba````_____^]]\\[[ZZYYXXWWVVUTTSRRQQPPPPOONNNMMLLKJJIIHHGGFFFEEEEDCCCBBBBBAA@@??>>==<<;::999887766554433221100//..--,,++**))((''&&%%$$##\"\"!!!!!!!!!!!    \031\031\030\030\030\030\029\029\029\029\029\029\029\029\028\027\027\027\026\026\025\025\024\024\024\024\023\023\023\023\022\022\022\021\021\021\021\021\021\021\020\019\019\019\019\018\018\017\017\016\016\015\015\014\014\r\r\012\012\011\011\011\011\n\t\b\b\007\007\007\006\006\006\006\006\006\006\006\006\006\006\006\005\004\004\003\002\002\002\002\002\002\002\001\001\001\001\001\001")
  
  and goto =
    ((16, "\000\n\000\000\018\022\000\000\000\000\000\000\000\000\000\000\000U\002t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\144\000\000\000\000\000\000\001R\000\000\000\000\000\000\000\000\0070\000\000\007\212\000\000\000\000\002\132\bx\000\000\000\229\000\000\000\000\000\138\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\012\004$\000\000\000\000\016\000\000\000\006\186\000\000\000\000\000\n\000\000\000\014\000\000\000\000\t\028\000\000\000\000\000\000\007\186\0009\000b\000\000\000\000\000\000\000\165\000\150\000\000\000H\000\176\000\000\001D\001>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\012\000c\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\190\000\128\000\000\000\000\004\216\000H\000\000\000\000\000\000\001H\000\000\000\000\000-\000\000\000\000\000*\000H\000\220\000\000\000\000\000\000\000\000\003\160\000\128\000-\000\000\012\190\000\000\020\020\000\000\000@\000\000\b,\000\182\000\000\000\000\003\004\000\220\000\000\001X\000\182\000\000\000\000\000\000\000\000\017\b\000\000\000\000\0186\000\000\000\000\019\140\000\000\000\000\000\000\000\000\000\000\000\000\017J\000\000\rB\000\000\000\000\000\000\000$\000\000\000\000\000\000\000\000\001l\000\000\000\000\000\000\000\000\000\132\000\014\000\000\000\000\0018\000b\000\000\000\000\000\000\003t\000\188\000\014\001<\000b\000\000\000\000\001\248\001X\000\000\000\000\000\000\001\156\004d\000\000\001`\002\246\000\000\000%\t\154\000\000\000\000\000\000\000\000\000\000\000\000\001X\002t\000\000\000\000\000\000\000\000\001^\000<\000\000\000\000\000\000\000\000\000\000\000\000\003\250\005\246\000\000\006d\000\000\006f\000\000\000\000\005z\001|\002t\001\166\000<\001\246\000\000\000\000\020T\000\000\000\000\001R\000j\t\154\001X\000\000\000\000\001\154\nZ\000\000\000\000\000\000\000\000\000\000\001\202\002\246\000\000\000\254\t\154\000\000\000\000\000\000\000\000\000\000\002\"\n\136\000\000\000\000\000Q\000\000\0001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002J\004\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\148\000\000\000\000\018\194\000\000\000\000\000\000\000\000\000\000\000\014\000\000\007\b\002\150\000\014\001\184\000b\000\000\000\000\0068\002D\017\204\000\000\002\164\002\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0004\000|\000\000\001\130\018\214\000\000\000\000\001t\000\000\000\000\000\000\000\000\000\000\b\152\000\000\000\000\000\000\000\000\rp\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\004\000\000\000\000\001\168\000\000\003\236\000\000\001\228\003&\000\000\000\000\019>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0058\r\190\007:\001\252\002X\014\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\"\000\000\000\000\000\000\000\000\000\000\000\000\004v\000\000\000\000\000\000\000\000\000\000\000\000\002 \002t\002N\000<\000\000\000\000\000\000\002n\002t\002x\002t\002\142\000<\002\150\000<\000\000\000\000\007`\002\152\004H\002\158\002t\002\162\000<\002\188\002t\002\202\002t\002\206\000<\002\212\000<\000v\000\000\001\210\000\003\011\136\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\228\000\000\000\000\000\000\001\196\000\000\000\000\019b\000\000\002`\000\000\000\000\002V\002X\002Z\000\000\000\000\000\000\003H\002r\005&\002B\000\000\000\000\000\000\000\192\000\000\003Z\000\000\014t\000\000\000\000\000\000\006\186\000\000\001:\000\000\000\000\003`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\000\000\014\190\000\000\002\252\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\152\000\000\000\000\000\000\000\000\000\000\015\000\000\000\0044\000\000\000\000\015|\000\000\003R\004\208\000\000\000\000\000\000\000\250\000\000\003\014\002t\003\018\000<\000\000\007z\003\020\002t\003\030\000<\000\000\011\144\012\012\000\000\005l\000\000\000\000\000\000\000\000\000\000\002\016\000\000\003,\000\000\000\000\000\000\000\000\000\000\000\000\004\150\000\000\000\000\000\000\000s\000\000\003x\001\250\000\000\015\190\000\000\000\000\000\000\000\000\000\000\006\b\000\000\006\164\000\000\000\000\000\000\016\b\000\000\000\000\000\000\000\000\003\014\000\000\000\000\000\000\000\000\000\000\000\000\004\186\000\000\000\000\005\144\000\000\000\000\003z\012T\0034\002t\0038\000<\007~\003:\002t\003D\000<\000\000\006,\000\000\000\000\020~\000\000\003\146\000\000\005\206\000\000"), (16, "\000O\000X\002C\000-\0027\002\014\000\223\000\197\001e\001\015\000\202\000G\000H\000:\000\176\000\002\002.\000Q\000\224\002\016\002D\000-\000O\000P\000\n\000e\001\235\001\236\002\017\000-\000u\000S\000T\000O\000P\000D\000\217\000\218\001\b\000Q\000I\001\015\000G\000H\002/\001\242\000;\0024\001\007\000\219\000Q\002:\000L\000S\000T\000E\000F\000i\000e\000}\000\127\000G\000H\000u\000S\000T\001\244\000\003\001\245\001\246\002<\000\180\000-\000\143\000:\000d\001\247\000V\000-\000t\000\226\000\244\001\014\001\015\001\250\001\185\000\142\001\179\000\133\000h\000i\000\174\000\181\000m\000\178\000\165\000\183\001&\001\016\001\015\000G\000H\000:\001I\001\021\000\188\002 \000\175\000\189\002)\001K\000\220\000\190\002E\000s\000\146\001\251\000o\000J\000\131\002F\000\133\000\228\000\181\000\150\001\252\000O\000X\002\012\0012\000\177\002\014\000\223\000-\000\141\000\185\000|\000G\000H\000o\000z\000\221\000\181\000Q\000\224\002\016\000.\000/\001_\001d\000o\000e\0013\000\222\002\017\001\003\000u\000S\000T\001R\000O\000P\002\022\000O\000P\000O\000P\000\141\001\006\000|\000O\001\143\000\182\000O\000P\001\226\002H\000Q\001\004\000\136\000Q\000\181\000Q\000i\000:\000}\000\127\000Q\000e\000-\000Q\000S\000T\000u\000S\000T\000S\000T\000e\000\143\000\170\000S\000T\000u\000S\000T\000\226\000.\000/\002\023\001c\002\030\000\142\000:\000\133\000-\000\247\000\199\000\181\000\179\000i\000\187\000}\000\127\001\023\001\216\001\217\000O\000X\000-\000i\000\193\002 \001\024\000\196\002)\000\143\000:\000\210\0026\000\216\000\146\001\006\000o\000Q\000-\000\249\002B\000\228\000\142\000\150\000\133\000e\001\235\001\236\001f\000\233\000u\000S\000T\000\141\000\140\000|\001P\001\b\001\028\001(\001/\002!\002&\001\000\001\029\001\242\001\r\001\007\001\030\000\235\000\167\000\168\000\237\000o\000:\000n\0018\000i\001\181\000}\000\127\001\227\001s\000o\001Q\000-\001\244\0010\001\245\001\246\000\141\001p\000|\000\143\000:\001+\001\247\002'\000O\000X\000-\001\031\000|\001\129\001\250\001\185\000\142\001\n\000\133\000\197\001\146\001=\001\191\001\148\000\211\000Q\000O\001\137\001\234\000G\000H\000\197\001\133\000e\001\235\001\236\000\212\001\026\000u\000S\000T\001\147\000:\000Q\001\021\000\146\001\251\000o\001*\000:\001\b\001K\001{\001\242\000\150\001\252\002G\000S\000T\001\r\001\007\001.\001\b\001\149\000\141\000i\000|\000}\000\127\001\212\002$\001\r\001\007\002%\001\244\0016\001\245\001\246\0021\001\015\001\154\000\143\001@\001+\001\247\001\156\000O\000X\000-\000\176\000O\000P\001\250\001\185\000\142\001\158\000\133\000\197\000\213\001\160\001~\001\165\001\128\000Q\001\167\001\169\001\241\000Q\001\006\000-\000\181\000e\001\235\001\236\002#\000e\000u\000S\000T\001\171\000\137\000S\000T\000\146\001\251\000o\001\173\001\175\001\b\000\247\001\177\001\242\000\150\001\252\001\207\001\206\001\205\001\r\001\007\001.\000\214\001\209\000\141\000i\000|\000}\000\127\000i\000\184\001\231\001\218\000\186\001\244\001\229\001\245\001\246\002\006\000G\000H\000\143\002\r\002\015\001\247\002\019\000O\000X\000-\002\021\000O\000P\001\250\001\185\000\142\000\197\000\133\0020\002Q\000\200\001\001\002S\002U\000Q\002X\001h\001\249\000Q\002Z\001\007\002b\000e\001\235\001\236\000\000\000{\000u\000S\000T\001k\001l\000S\000T\000\146\001\251\000o\001\b\000\177\001o\000o\000-\001\242\000\150\001\252\002$\001\r\001\007\002%\000\000\000\000\000\000\000\223\000\141\000i\000|\000}\000\127\000i\000|\000\000\000\000\000\000\001\244\000\224\001\245\001\246\000O\001X\000\000\000\143\000\181\000\000\001\247\000\230\000O\000X\000-\000\000\000\000\000\000\001\250\001\185\000\142\000Q\000\133\000\000\001\166\000\000\000\000\001\168\000\211\000Q\000\000\000\000\002\001\000G\000H\000S\000T\000e\001\235\001\236\000\212\000\000\000u\000S\000T\000O\000P\000\000\000\000\000\146\001\251\000o\001h\000\000\000\000\000o\000\000\001\242\000\150\001\252\000\000\000\000\000Q\000\226\000\000\001i\001k\001l\000\141\000i\000|\000}\000\127\000\000\000|\001r\000S\000T\001\244\000\000\001\245\001\246\002!\002&\000\000\000\143\000\000\000\000\001\247\000\000\000O\000X\000-\000\000\000O\000P\001\250\001\185\000\142\000\197\000\133\000\000\000\213\000\176\002*\000\228\000\000\000Q\000\000\000\000\002\007\000Q\000\000\000\000\000\181\000e\001\235\001\236\002K\000\000\000u\000S\000T\000\000\000\197\000S\000T\000\146\001\251\000o\001\b\000\000\002,\0025\000\000\001\242\000\150\001\252\000\000\001\r\001\007\001\017\000\197\000\247\000\214\000\000\000\141\000i\000|\000}\000\127\000i\000\000\000\000\000\000\001\b\001\244\000\000\001\245\001\246\000\000\002/\001\140\000\143\0024\001\007\001\247\000\000\000O\000X\000-\000\000\000\000\001\b\001\250\001\185\000\142\000\232\000\133\000\000\000\234\002$\001\r\001\007\002%\000Q\000G\000H\002\027\001K\001w\000\200\001\027\000e\001\235\001\236\000\000\000\000\000u\000S\000T\001\007\000\000\000\000\000\000\000\146\001\251\000o\000\000\000\000\000\000\000o\001\132\001\242\000\150\001\252\000\000\000\000\000\000\000\177\000\000\000\000\000\000\000\223\000\141\000i\000|\000}\000\127\002N\000p\000\000\000\000\000\000\001\244\000\224\001\245\001\246\001~\000\000\001\128\000\143\000\000\000\223\001\247\000\229\000O\000X\000-\000\197\000\000\000\000\001\250\001\185\000\142\000\224\000\133\002,\0025\001\214\001\222\001\230\001\217\000Q\000\000\000\225\0029\000\181\000\000\000\000\000\000\000e\001\235\001\236\000\000\000\000\000u\000S\000T\000\000\001\b\000\000\000\000\000\146\001\251\000o\002P\000\000\000\000\0024\001\007\001\242\000\150\001\252\000\000\000\000\000\000\000\226\000\223\000\223\000\000\000\000\000\141\000i\000|\000}\000\127\002]\000\000\000\000\000\224\000\224\001\244\000\000\001\245\001\246\000\247\000\226\000\000\000\143\000\227\000\229\001\247\001A\000O\000X\000-\000\197\000\000\000\000\001\250\001\185\000\142\001>\000\133\002,\0025\0009\001\016\002c\000C\000Q\0014\001G\002;\000\000\000G\000H\000\000\000e\001\235\001\236\000\000\000\000\000u\000S\000T\001;\001\b\000\228\000\000\000\146\001\251\000o\002/\001\012\000\000\0024\001\007\001\242\000\150\001\252\000\226\000\226\000\000\0012\0015\000\000\000\000\0017\000\141\000i\000|\000}\000\127\000G\000H\000\000\000\000\000\000\001\244\000\000\001\245\001\246\000O\000X\0009\000\143\000\000\000C\001\247\0014\001\141\000\000\000\000\000G\000H\001B\001\250\001\185\000\142\000Q\000\133\000\000\000\228\000\228\001;\000\000\000\000\000e\001\170\000\000\000\000\001\174\000u\000S\000T\000\181\000\000\000G\000H\000\000\000\000\002\018\0012\002W\002\020\000\000\002Y\000\146\001\251\000o\000G\000H\000G\000H\001K\001w\000\150\001\252\000\000\000i\000\000\000}\000\127\000\000\000\000\000\000\000\141\000\000\000|\001\214\001\224\001\230\001\217\0009\000\181\000\143\000C\001y\0014\0019\000\000\000\000\000G\000H\000O\000X\0009\001\135\000\142\000C\000\133\0014\001\138\001;\000\181\000G\000H\000\000\000\000\000\000\000\000\000Q\000\000\001~\000\000\001\128\001;\000\000\000\000\000e\000\000\0012\000\000\000\000\000u\000S\000T\000\146\000\181\000o\000\000\000\000\000\000\000\000\0012\000\000\000\150\000\000\000O\000P\000\000\000\181\000\000\000\181\000\000\000\000\000\141\000\000\000|\000\000\000\000\000i\000\000\000}\000\127\000Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000e\000\000\000\000\000\000\000\143\000u\000S\000T\000\000\000\000\000\181\000\000\000\000\000O\000X\0009\001\135\000\142\000C\000\133\0014\001t\000\000\000\181\000G\000H\000\000\000\000\000\000\000\000\000Q\0009\000i\000\000\000C\001;\0014\001V\000e\000\000\000G\000H\000\000\000u\000S\000T\000\146\000\000\000o\000\000\000\000\001;\000\000\0012\000\000\000\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\133\000\000\000\141\000\000\000|\000\000\0012\000i\000\000\000}\000\127\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\143\000\000\000\000\000\000\000\000\000\000\000o\000\000\000\000\000O\000X\0009\001\135\000\142\000C\000\133\0014\001C\000\000\000\181\000G\000H\000\000\000\138\000\000\000|\000Q\000\000\000\000\000\000\000\000\001;\000\000\000\000\000e\000\181\000\000\000\000\000\000\000u\000S\000T\000\146\000\000\000o\000\000\000\000\000\000\000\000\0012\000\000\000\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\141\000\000\000|\000\000\000\000\000i\000\000\000}\000\127\000\000\000\000\000\000\000\000\000\209\000\000\000\000\000\215\000\223\000\000\000\000\000\000\000\143\000G\000H\000\000\000\000\000\000\000\000\000\000\000\224\000\000\000\000\000\000\000\000\000\142\000\000\000\133\000\000\000\000\000\231\000\181\000\000\000\000\000\000\000\236\000\238\000\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \000\000\000\247\000\000\000\000\000\000\000\000\000\000\000\146\000\000\000o\000\000\000\000\000O\000X\001Y\000\000\000\156\000\000\000\254\000\000\000\000\000\000\000\000\000\000\000\000\001E\000\141\000\000\000|\000Q\001\"\000\000\000\000\000\000\000\000\000\226\000\000\000e\000\000\000\000\000\000\000\000\000u\000S\000T\000\000\000\000\000\181\000\000\001\b\001\012\000O\000X\000\000\000\000\000\000\000\000\000\176\001\r\001\007\001\017\000\000\000\242\000\000\001]\000\000\000\000\000\000\000Q\000i\000\000\000}\000\127\000\000\000O\000X\000e\000\228\000\000\000\000\000\176\000u\000S\000T\000\000\000\143\000\000\000\000\000\000\000\251\000\000\000Q\001\019\000\000\000\000\000\000\000\000\000\000\000\142\000e\000\133\000\000\000\000\000\000\000u\000S\000T\000\000\000i\000\000\000}\000\127\001\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\143\000\000\000\000\000\146\000\000\000o\000\000\000i\000\000\000}\000\127\000\000\000\156\000\142\000\000\000\133\000O\000X\000\000\000\000\000\000\000\157\000\141\000\143\000|\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000\000\000\000\000\142\000\000\000\133\000\000\000\000\000e\000\146\000\000\000o\000\000\000u\000S\000T\000\177\000\000\000\252\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\141\000\000\000|\000\000\000\146\000\000\000o\000\154\000\000\000\000\000\000\000\177\000i\000\252\000}\000\127\000\000\000O\000X\000\000\000\000\000O\000X\000\141\000\000\000|\000\000\000\000\000\143\000\000\000\000\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000Q\000\000\000\000\000\142\000e\000\133\000\000\000\000\000e\000u\000S\000T\000\000\000u\000S\000T\000\000\000\000\000\000\002\024\000\000\000\000\000\000\000\000\001\183\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\146\000\000\000o\000\000\000i\000\000\000}\000\127\000i\000\156\000}\000\127\000\000\000O\000X\000\000\000\000\000\000\000\157\000\141\000\143\000|\000\000\000\000\000\143\000\000\000\000\000\000\000\000\000\000\000Q\000\000\001\185\000\142\000\000\000\133\002\030\000\142\000e\000\133\000\000\000\000\000\000\000u\000S\000T\000\000\000\000\000\000\000\000\002\026\002R\000\000\000\000\002T\000\223\000\000\000\000\000\000\000\000\000G\000H\000\146\000\000\000o\000\000\000\146\000\224\000o\000\000\000i\000\150\000}\000\127\000\000\000\150\000\000\002V\000\000\000O\000X\000\141\000\000\000|\000\000\000\141\000\143\000|\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000\000\002\028\000\142\000\000\000\133\000O\000X\000e\000\000\000\000\000\000\000\000\000u\000S\000T\000\000\000\000\000\000\000\000\002[\000\000\000\000\000Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000e\000\146\000\226\000o\000\000\000u\000S\000T\000\000\000i\000\150\000}\000\127\000\000\000\181\000\000\000\000\000\000\000\000\000\000\000\141\000\000\000|\000\000\000\000\000\143\000\000\000\000\000\000\000\000\000\000\002\\\000i\002_\000}\000\127\000\000\000\000\000\142\000\000\000\133\000O\000X\002a\002c\000\000\000\000\000\000\000\143\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000\000\000\144\000\142\000\000\000\133\000O\000X\000e\000\146\000\000\000o\000\000\000u\000S\000T\000\000\000\000\000\156\000\000\000\000\000\000\000\000\000Q\000\000\000\000\000\000\001\144\000\141\000\000\000|\000e\000\146\000\000\000o\000\000\000u\000S\000T\000\000\000i\000\150\000}\000\127\000\000\000O\000X\000\000\000\000\000\000\000\000\000\141\000\000\000|\000\000\000\000\000\143\000\000\000\000\000\000\000\000\000\000\000Q\000i\000\000\000}\000\127\000\000\000\161\000\142\000e\000\133\000\000\000\000\000\000\000u\000S\000T\000\000\000\143\000\000\000\000\000\000\000\000\000O\000X\000\000\000\000\000\000\000\000\000\000\000\000\000\142\000\000\000\133\000\000\000\000\000\000\000\146\000\000\000o\000Q\000i\000\000\000}\000\127\000\000\000\150\000\000\000e\000\000\000\000\000\000\000\000\000u\000S\000T\000\141\000\143\000|\000\000\000\146\000\000\000o\000\000\000\000\000\000\000\000\000\000\000\000\000\156\000\142\000\000\000\133\000\000\000\000\000O\000X\000\000\001[\000\141\000i\000|\000}\000\127\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000\143\000\000\000\000\000\146\000e\000o\001\131\000\000\000\000\000u\000S\000T\001}\000\142\000\000\000\133\000O\000X\000\000\000\000\000\000\000\000\000\141\000\000\000|\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000\000\000\000\000i\000\000\000}\000\127\000\000\000e\000\146\000\000\000o\001|\000u\000S\000T\000O\000X\001}\000\143\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\141\000\000\000|\001\220\000\142\000Q\000\133\000\000\000\000\000\000\000\000\000\000\000i\000e\000}\000\127\000\000\000\000\000u\000S\000T\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\143\000\000\000\000\000\000\000\000\000\146\000\000\000o\000\000\000\000\000\000\000\000\001\239\000\142\000\150\000\133\000\000\000i\000\000\000}\000\127\000\000\000O\000X\000\141\000\000\000|\000\000\000\000\000\000\000\000\000\000\000\000\000\143\000\000\000\000\000\000\000\000\000\000\000Q\000\000\000\000\000\146\000\000\000o\001\255\000\142\000e\000\133\000\000\000\000\000\150\000u\000S\000T\000O\000X\000\000\000\000\000\000\000\000\000\141\000\000\000|\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000\000\000\000\000\146\000\000\000o\000\000\000i\000e\000}\000\127\000\000\000\150\000u\000S\000T\000O\000X\000\000\000\000\000O\000X\000\141\000\143\000|\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000\000\002\004\000\142\000Q\000\133\000\000\000i\000e\000}\000\127\000\000\000e\000u\000S\000T\000\000\000u\000S\000T\000\000\000\000\000\000\000\143\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\146\000\000\000o\000\000\000\142\000\000\000\133\000\000\000i\000\150\000}\000\127\000i\000\000\000}\000\127\000\000\000\000\000\000\000\141\000\000\000|\000\000\000\000\000\143\000\000\000\000\000\000\000\143\000\000\000\000\000\000\000\000\000\146\000\000\000o\0023\000\142\000\000\000\133\002?\000\142\001}\000\133\000\000\000\000\000O\000X\000\000\000\000\000\000\000\000\000\141\000\000\000|\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000\000\000\000\000\146\000\000\000o\000\000\000\146\000e\000o\000\000\000\000\001T\000u\000S\000T\000\150\000\000\000\000\000\000\000O\000X\000\141\000\000\000|\000\000\000\141\000\000\000|\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000\000\000\000\000i\000\000\000}\000\127\000\000\000e\000\000\000\000\000\000\000\000\000u\000S\000T\000O\000X\000\000\000\143\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\000Q\000\133\000\000\000\000\000\000\000\000\000\000\000i\000e\000}\000\127\000\000\000\000\000u\000S\000T\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\143\000\000\000\000\000\000\000\000\000\146\000\000\000o\000\000\000\000\000\000\000\000\000\000\000\142\000\153\000\133\000\000\000i\000\000\000}\000\127\000\000\000\000\000\000\000\141\000\000\000|\000\209\000\000\000\000\000\215\000\223\000\000\000\143\000\000\000\000\000G\000H\000\000\000\000\000\000\000\000\000\146\000\224\000o\000\000\000\142\000\000\000\133\000\000\000\000\000\147\000\000\000\231\000\000\000\000\000\000\000\000\000\236\000\238\000\246\000\141\000\000\000|\001\153\000\000\000\000\001\157\000\223\000\000\000\000\000\247\001\161\000G\000H\000\146\000\000\000o\000O\000P\000\224\001\162\000\000\000\000\000\159\000\000\000\000\000\000\001>\000\000\001\163\000\000\000\000\000\000\000\141\000Q\000|\000\000\000\000\000\000\000\000\000\000\000\000\000e\000\000\000\226\000\000\000\000\000u\000S\000T\000\000\000\000\000\000\000\000\000\000\000\000\000\181\000\000\000\000\001\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\242\000\000\000\000\000i\000\000\000}\000\127\000\000\000\000\000\000\000\226\001\178\002I\000\000\000\000\000\228\000O\000P\000\000\000\143\000\000\000\000\000\181\000\000\000\000\000\000\000O\000P\000\000\000\000\001\019\000\000\000\142\000Q\000\133\000\000\002J\000\000\002M\000\000\000\000\000e\002d\000Q\000\000\000\000\000u\000S\000T\000\000\000\000\000e\000\228\000\000\000\000\000\000\000u\000S\000T\000\000\000\000\000\149\000\000\000o\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000i\000\000\000}\000\127\000\000\000O\000P\000\141\000\000\000|\000i\000\000\000}\000\127\000\000\000\000\000\143\000\000\000\000\000\000\000\000\000\000\000Q\000O\000P\000\000\000\143\000\000\000\000\000\142\000e\000\133\000\000\000\000\000\000\000u\000S\000T\000\000\000\142\000Q\000\133\000\000\000\000\000O\000P\000\000\000\000\000e\000\000\000\000\000\000\000\000\000u\000S\000T\000\000\000\000\001-\000\000\000o\000Q\000i\000\000\000}\000\127\000\000\000\000\001M\000e\000o\000\000\000\000\000\000\000u\000S\000T\000\141\000\143\000|\000i\000\000\000}\000\127\000\000\000\000\000\000\000\141\000\000\000|\000\000\000\142\000\000\000\133\000\000\000\000\000\143\000\000\000\000\000\000\000\000\000i\000\000\000\000\000\152\000\000\000\000\000\000\000\000\000\142\000\000\000\133\000O\000P\000\000\000\000\000\000\000\143\000\000\000\000\001n\000\000\000o\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000\142\000\000\000\133\000\000\000\000\000\000\000\000\000e\001\198\000\141\000o\000|\000u\000S\000T\000\000\000\209\000\000\000\000\000\215\000\223\000\000\000\000\000\000\000\000\000G\000H\000\141\000\000\000|\000\000\000o\000\224\000\000\000\000\000\000\000\000\002R\000\000\000i\002T\000\223\000\231\000\000\000\000\000\000\000G\000H\000\141\000\241\000|\000\000\000\000\000\224\000\000\000\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002V\000\000\000\000\000\000\000\000\000\142\000\000\000\133\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\226\000\000\000\000\000\000\000\000\000o\000\000\000\000\002`\000\000\000\000\000\000\000\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\226\000\141\000\000\000|\000\000\000\000\000\242\000\000\000\000\000\000\000\000\000\000\000\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\228\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\228"))
  
  and semantic_action =
    [|
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _2 : 'tv_option_type_qualifier_list_ = Obj.magic _2 in
        let _1_inlined1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 972 "cparser/pre_parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_pointer1_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_abstract_declarator_parameter_declaration_ = let _1 =
          let _2 =
            let _1 = _1_inlined1 in
            
# 706 "cparser/pre_parser.mly"
    ()
# 984 "cparser/pre_parser.ml"
            
          in
          
# 710 "cparser/pre_parser.mly"
    ()
# 990 "cparser/pre_parser.ml"
          
        in
        
# 746 "cparser/pre_parser.mly"
    ()
# 996 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _2 : 'tv_direct_abstract_declarator = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_abstract_declarator_parameter_declaration_ = let _1 = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 1021 "cparser/pre_parser.ml"
         in
        
# 746 "cparser/pre_parser.mly"
    ()
# 1026 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2 : 'tv_direct_abstract_declarator = Obj.magic _2 in
        let _2_inlined1 : 'tv_option_type_qualifier_list_ = Obj.magic _2_inlined1 in
        let _1_inlined1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1067 "cparser/pre_parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_pointer1_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_abstract_declarator_parameter_declaration_ = let _1 =
          let _2 = _2_inlined1 in
          let x =
            let _2 =
              let _1 = _1_inlined1 in
              
# 706 "cparser/pre_parser.mly"
    ()
# 1081 "cparser/pre_parser.ml"
              
            in
            
# 710 "cparser/pre_parser.mly"
    ()
# 1087 "cparser/pre_parser.ml"
            
          in
          
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 1093 "cparser/pre_parser.ml"
          
        in
        
# 746 "cparser/pre_parser.mly"
    ()
# 1099 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _2 : 'tv_option_type_qualifier_list_ = Obj.magic _2 in
        let _1_inlined1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1133 "cparser/pre_parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_pointer1_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_abstract_declarator_type_name_ = let _1 =
          let _2 =
            let _1 = _1_inlined1 in
            
# 706 "cparser/pre_parser.mly"
    ()
# 1145 "cparser/pre_parser.ml"
            
          in
          
# 710 "cparser/pre_parser.mly"
    ()
# 1151 "cparser/pre_parser.ml"
          
        in
        
# 746 "cparser/pre_parser.mly"
    ()
# 1157 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _2 : 'tv_direct_abstract_declarator = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_abstract_declarator_type_name_ = let _1 = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 1182 "cparser/pre_parser.ml"
         in
        
# 746 "cparser/pre_parser.mly"
    ()
# 1187 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2 : 'tv_direct_abstract_declarator = Obj.magic _2 in
        let _2_inlined1 : 'tv_option_type_qualifier_list_ = Obj.magic _2_inlined1 in
        let _1_inlined1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1228 "cparser/pre_parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_pointer1_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_abstract_declarator_type_name_ = let _1 =
          let _2 = _2_inlined1 in
          let x =
            let _2 =
              let _1 = _1_inlined1 in
              
# 706 "cparser/pre_parser.mly"
    ()
# 1242 "cparser/pre_parser.ml"
              
            in
            
# 710 "cparser/pre_parser.mly"
    ()
# 1248 "cparser/pre_parser.ml"
            
          in
          
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 1254 "cparser/pre_parser.ml"
          
        in
        
# 746 "cparser/pre_parser.mly"
    ()
# 1260 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_multiplicative_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_additive_expression = 
# 309 "cparser/pre_parser.mly"
    ()
# 1285 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_multiplicative_expression = Obj.magic _3 in
        let _2 : 'tv_additive_operator = Obj.magic _2 in
        let _1 : 'tv_additive_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_additive_expression = 
# 309 "cparser/pre_parser.mly"
    ()
# 1324 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1345 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_additive_operator = 
# 304 "cparser/pre_parser.mly"
               ()
# 1353 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1374 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_additive_operator = 
# 304 "cparser/pre_parser.mly"
               ()
# 1382 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_equality_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_and_expression = 
# 338 "cparser/pre_parser.mly"
    ()
# 1407 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_equality_expression = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1441 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_and_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_and_expression = 
# 338 "cparser/pre_parser.mly"
    ()
# 1450 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_assignment_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_argument_expression_list = 
# 269 "cparser/pre_parser.mly"
    ()
# 1475 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_assignment_expression = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1509 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_argument_expression_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_argument_expression_list = 
# 269 "cparser/pre_parser.mly"
    ()
# 1518 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_asm_arguments = 
# 858 "cparser/pre_parser.mly"
    ()
# 1536 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_asm_operands = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1564 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_asm_arguments = 
# 858 "cparser/pre_parser.mly"
    ()
# 1572 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_asm_operands = Obj.magic _4 in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1612 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_asm_operands = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1618 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_asm_arguments = 
# 858 "cparser/pre_parser.mly"
    ()
# 1626 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : 'tv_asm_flags = Obj.magic _6 in
        let _5 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1678 "cparser/pre_parser.ml"
        ) = Obj.magic _5 in
        let _4 : 'tv_asm_operands = Obj.magic _4 in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1684 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_asm_operands = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1690 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_asm_arguments = 
# 858 "cparser/pre_parser.mly"
    ()
# 1698 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_asm_attributes = 
# 851 "cparser/pre_parser.mly"
    ()
# 1716 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_asm_attributes = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1744 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_asm_attributes = 
# 851 "cparser/pre_parser.mly"
    ()
# 1752 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_asm_attributes = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1780 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_asm_attributes = 
# 851 "cparser/pre_parser.mly"
    ()
# 1788 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_string_literals_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_asm_flags = 
# 882 "cparser/pre_parser.mly"
    ()
# 1813 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_string_literals_list = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1847 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_asm_flags = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_asm_flags = 
# 882 "cparser/pre_parser.mly"
    ()
# 1856 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_asm_op_name = 
# 877 "cparser/pre_parser.mly"
    ()
# 1874 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1907 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let i : 'tv_general_identifier = Obj.magic i in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1913 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_asm_op_name = let _2 = 
# 212 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 1921 "cparser/pre_parser.ml"
         in
        
# 877 "cparser/pre_parser.mly"
    ()
# 1926 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1971 "cparser/pre_parser.ml"
        ) = Obj.magic _5 in
        let _4 : 'tv_expression = Obj.magic _4 in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 1977 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_string_literals_list = Obj.magic _2 in
        let _1 : 'tv_asm_op_name = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_asm_operand = 
# 872 "cparser/pre_parser.mly"
    ()
# 1987 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_asm_operands = 
# 863 "cparser/pre_parser.mly"
    ()
# 2005 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_asm_operands_ne = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_asm_operands = 
# 863 "cparser/pre_parser.mly"
    ()
# 2030 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_asm_operand = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2064 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_asm_operands_ne = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_asm_operands_ne = 
# 868 "cparser/pre_parser.mly"
    ()
# 2073 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_asm_operand = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_asm_operands_ne = 
# 868 "cparser/pre_parser.mly"
    ()
# 2098 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2155 "cparser/pre_parser.ml"
        ) = Obj.magic _7 in
        let _6 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2160 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_asm_arguments = Obj.magic _5 in
        let _4 : 'tv_string_literals_list = Obj.magic _4 in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2167 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_asm_attributes = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2173 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_asm_statement = 
# 820 "cparser/pre_parser.mly"
    ()
# 2181 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_conditional_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_expression = 
# 368 "cparser/pre_parser.mly"
    ()
# 2206 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_assignment_expression = Obj.magic _3 in
        let _2 : 'tv_assignment_operator = Obj.magic _2 in
        let _1 : 'tv_unary_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assignment_expression = 
# 368 "cparser/pre_parser.mly"
    ()
# 2245 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2266 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 382 "cparser/pre_parser.mly"
    ()
# 2274 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2295 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 382 "cparser/pre_parser.mly"
    ()
# 2303 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2324 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 382 "cparser/pre_parser.mly"
    ()
# 2332 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2353 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 382 "cparser/pre_parser.mly"
    ()
# 2361 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2382 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 382 "cparser/pre_parser.mly"
    ()
# 2390 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2411 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 382 "cparser/pre_parser.mly"
    ()
# 2419 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2440 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 382 "cparser/pre_parser.mly"
    ()
# 2448 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2469 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 382 "cparser/pre_parser.mly"
    ()
# 2477 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2498 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 382 "cparser/pre_parser.mly"
    ()
# 2506 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2527 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 382 "cparser/pre_parser.mly"
    ()
# 2535 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2556 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assignment_operator = 
# 382 "cparser/pre_parser.mly"
    ()
# 2564 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2615 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2620 "cparser/pre_parser.ml"
        ) = Obj.magic _5 in
        let _4 : 'tv_gcc_attribute_list = Obj.magic _4 in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2626 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2631 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2636 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_attribute_specifier = 
# 588 "cparser/pre_parser.mly"
    ()
# 2644 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2683 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_argument_expression_list = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2689 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2694 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_attribute_specifier = 
# 588 "cparser/pre_parser.mly"
    ()
# 2702 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2741 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_argument_expression_list = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2747 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2752 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_attribute_specifier = 
# 588 "cparser/pre_parser.mly"
    ()
# 2760 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2799 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_type_name = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2805 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 2810 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_attribute_specifier = 
# 588 "cparser/pre_parser.mly"
    ()
# 2818 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_attribute_specifier_list = 
# 581 "cparser/pre_parser.mly"
    ()
# 2836 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_attribute_specifier_list = Obj.magic _2 in
        let _1 : 'tv_attribute_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_attribute_specifier_list = 
# 581 "cparser/pre_parser.mly"
    ()
# 2868 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_declaration_block_item_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_block_item = 
# 805 "cparser/pre_parser.mly"
    ()
# 2893 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_block_item = 
# 805 "cparser/pre_parser.mly"
    ()
# 2918 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 50 "cparser/pre_parser.mly"
      (string * Cabs.loc)
# 2939 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_block_item = 
# 805 "cparser/pre_parser.mly"
    ()
# 2947 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_block_item = Obj.magic _2 in
        let _1 : 'tv_option_block_item_list_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_block_item_list = 
# 799 "cparser/pre_parser.mly"
    ()
# 2979 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_assignment_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_c_initializer = 
# 757 "cparser/pre_parser.mly"
    ()
# 3004 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3043 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_COMMA_ = Obj.magic _3 in
        let _2 : 'tv_initializer_list = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3050 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_c_initializer = 
# 757 "cparser/pre_parser.mly"
    ()
# 3058 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_unary_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_cast_expression = 
# 293 "cparser/pre_parser.mly"
    ()
# 3083 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_cast_expression = Obj.magic _4 in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3123 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_type_name = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3129 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_cast_expression = 
# 293 "cparser/pre_parser.mly"
    ()
# 3137 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = ctx;
                MenhirLib.EngineTypes.startp = _startpos_ctx_;
                MenhirLib.EngineTypes.endp = _endpos_ctx_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3176 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_block_item_list_ = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3182 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_compound_statement = 
# 795 "cparser/pre_parser.mly"
    ( ctx() )
# 3191 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_logical_or_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_conditional_expression = 
# 363 "cparser/pre_parser.mly"
    ()
# 3216 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_conditional_expression = Obj.magic _5 in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3262 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_expression = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3268 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_logical_or_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_conditional_expression = 
# 363 "cparser/pre_parser.mly"
    ()
# 3277 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ctx2;
          MenhirLib.EngineTypes.startp = _startpos_ctx2_;
          MenhirLib.EngineTypes.endp = _endpos_ctx2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ctx1;
              MenhirLib.EngineTypes.startp = _startpos_ctx1_;
              MenhirLib.EngineTypes.endp = _endpos_ctx1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ctx2 : 'tv_save_context = Obj.magic ctx2 in
        let _2 : 'tv_parameter_type_list = Obj.magic _2 in
        let ctx1 : 'tv_save_context = Obj.magic ctx1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx1_ in
        let _endpos = _endpos_ctx2_ in
        let _v : 'tv_context_parameter_type_list = 
# 718 "cparser/pre_parser.mly"
    ( ctx1 (); ctx2 )
# 3316 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3349 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_option_init_declarator_list_ = Obj.magic _2 in
        let _1 : 'tv_declaration_specifiers_declaration_block_item__ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_block_item_ = 
# 408 "cparser/pre_parser.mly"
    ()
# 3359 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3392 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_option_typedef_declarator_list_ = Obj.magic _2 in
        let _1 : 'tv_declaration_specifiers_typedef = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_block_item_ = 
# 408 "cparser/pre_parser.mly"
    ()
# 3402 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_static_assert_declaration = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_block_item_ = 
# 408 "cparser/pre_parser.mly"
    ()
# 3427 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3460 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_option_init_declarator_list_ = Obj.magic _2 in
        let _1 : 'tv_declaration_specifiers_declaration_external_declaration__ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_external_declaration_ = 
# 408 "cparser/pre_parser.mly"
    ()
# 3470 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 3503 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_option_typedef_declarator_list_ = Obj.magic _2 in
        let _1 : 'tv_declaration_specifiers_typedef = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_external_declaration_ = 
# 408 "cparser/pre_parser.mly"
    ()
# 3513 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_static_assert_declaration = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_external_declaration_ = 
# 408 "cparser/pre_parser.mly"
    ()
# 3538 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_kr_param_declaration = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_list = 
# 912 "cparser/pre_parser.mly"
    ()
# 3563 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_kr_param_declaration = Obj.magic _2 in
        let _1 : 'tv_declaration_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_declaration_list = 
# 912 "cparser/pre_parser.mly"
    ()
# 3595 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_storage_class_specifier_no_typedef = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_specifier_no_typedef_name = 
# 454 "cparser/pre_parser.mly"
    ()
# 3620 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_type_qualifier_noattr = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_specifier_no_typedef_name = let _1 = 
# 576 "cparser/pre_parser.mly"
    ()
# 3645 "cparser/pre_parser.ml"
         in
        
# 454 "cparser/pre_parser.mly"
    ()
# 3650 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_attribute_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_specifier_no_typedef_name = let _1 = 
# 576 "cparser/pre_parser.mly"
    ()
# 3675 "cparser/pre_parser.ml"
         in
        
# 454 "cparser/pre_parser.mly"
    ()
# 3680 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_function_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_specifier_no_typedef_name = 
# 454 "cparser/pre_parser.mly"
    ()
# 3705 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_type_specifier_no_typedef_name = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_declaration_specifier_no_typedef_name = 
# 454 "cparser/pre_parser.mly"
    ()
# 3730 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_declaration_block_item__ = let _1 = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 3762 "cparser/pre_parser.ml"
         in
        
# 477 "cparser/pre_parser.mly"
    ()
# 3767 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_declaration_block_item__ = let _1 = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 3806 "cparser/pre_parser.ml"
         in
        
# 477 "cparser/pre_parser.mly"
    ()
# 3811 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_declaration_block_item__ = let _1 = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 3843 "cparser/pre_parser.ml"
         in
        
# 477 "cparser/pre_parser.mly"
    ()
# 3848 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_declaration_block_item__ = let _1 = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 3887 "cparser/pre_parser.ml"
         in
        
# 477 "cparser/pre_parser.mly"
    ()
# 3892 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_declaration_external_declaration__ = let _1 = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 3924 "cparser/pre_parser.ml"
         in
        
# 477 "cparser/pre_parser.mly"
    ()
# 3929 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_declaration_external_declaration__ = let _1 = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 3968 "cparser/pre_parser.ml"
         in
        
# 477 "cparser/pre_parser.mly"
    ()
# 3973 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_declaration_external_declaration__ = let _1 = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 4005 "cparser/pre_parser.ml"
         in
        
# 477 "cparser/pre_parser.mly"
    ()
# 4010 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_declaration_external_declaration__ = let _1 = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 4049 "cparser/pre_parser.ml"
         in
        
# 477 "cparser/pre_parser.mly"
    ()
# 4054 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_parameter_declaration_ = let _1 = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 4086 "cparser/pre_parser.ml"
         in
        
# 477 "cparser/pre_parser.mly"
    ()
# 4091 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_parameter_declaration_ = let _1 = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 4130 "cparser/pre_parser.ml"
         in
        
# 477 "cparser/pre_parser.mly"
    ()
# 4135 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_parameter_declaration_ = let _1 = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 4167 "cparser/pre_parser.ml"
         in
        
# 477 "cparser/pre_parser.mly"
    ()
# 4172 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_declaration_specifiers_parameter_declaration_ = let _1 = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 4211 "cparser/pre_parser.ml"
         in
        
# 477 "cparser/pre_parser.mly"
    ()
# 4216 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _5 in
        let _4 : 'tv_typedef_name = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4258 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_declaration_specifiers_typedef = let _1 = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 4266 "cparser/pre_parser.ml"
         in
        
# 487 "cparser/pre_parser.mly"
    ()
# 4271 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _5 in
        let _4 : 'tv_typedef_name = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4319 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_declaration_specifiers_typedef = let _1 = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 4328 "cparser/pre_parser.ml"
         in
        
# 487 "cparser/pre_parser.mly"
    ()
# 4333 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _5 in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4373 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_declaration_specifiers_typedef = let _1 = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 4383 "cparser/pre_parser.ml"
         in
        
# 487 "cparser/pre_parser.mly"
    ()
# 4388 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _5 in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4434 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_declaration_specifiers_typedef = let _1 = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 4445 "cparser/pre_parser.ml"
         in
        
# 487 "cparser/pre_parser.mly"
    ()
# 4450 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _5 in
        let _4 : 'tv_type_specifier_no_typedef_name = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4492 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_declaration_specifiers_typedef = let _1 = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 4500 "cparser/pre_parser.ml"
         in
        
# 487 "cparser/pre_parser.mly"
    ()
# 4505 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _5 in
        let _4 : 'tv_type_specifier_no_typedef_name = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4553 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_declaration_specifiers_typedef = let _1 = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 4562 "cparser/pre_parser.ml"
         in
        
# 487 "cparser/pre_parser.mly"
    ()
# 4567 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _5 in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4607 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_declaration_specifiers_typedef = let _1 = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 4617 "cparser/pre_parser.ml"
         in
        
# 487 "cparser/pre_parser.mly"
    ()
# 4622 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _5 in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4668 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let x : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_declaration_specifiers_typedef = let _1 = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 4679 "cparser/pre_parser.ml"
         in
        
# 487 "cparser/pre_parser.mly"
    ()
# 4684 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_attribute_specifier_list = Obj.magic _2 in
        let x : 'tv_declarator_noattrend = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_declarator = 
# 662 "cparser/pre_parser.mly"
    ( x )
# 4716 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let i : (
# 46 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 4749 "cparser/pre_parser.ml"
        ) = Obj.magic i in
        let _2 : 'tv_low_prec = Obj.magic _2 in
        let _1 : (
# 45 "cparser/pre_parser.mly"
      (string)
# 4755 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_declarator_identifier = 
# 654 "cparser/pre_parser.mly"
    ( i )
# 4763 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 46 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 4790 "cparser/pre_parser.ml"
        ) = Obj.magic i in
        let _1 : (
# 45 "cparser/pre_parser.mly"
      (string)
# 4795 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_declarator_identifier = let i = 
# 198 "cparser/pre_parser.mly"
    ( i )
# 4803 "cparser/pre_parser.ml"
         in
        
# 654 "cparser/pre_parser.mly"
    ( i )
# 4808 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_direct_declarator = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_declarator_noattrend = 
# 666 "cparser/pre_parser.mly"
    ( x )
# 4833 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let x : 'tv_direct_declarator = Obj.magic x in
        let _2 : 'tv_option_type_qualifier_list_ = Obj.magic _2 in
        let _1_inlined1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 4874 "cparser/pre_parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_pointer1_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_declarator_noattrend = let _1 =
          let _2 =
            let _1 = _1_inlined1 in
            
# 706 "cparser/pre_parser.mly"
    ()
# 4886 "cparser/pre_parser.ml"
            
          in
          
# 710 "cparser/pre_parser.mly"
    ()
# 4892 "cparser/pre_parser.ml"
          
        in
        
# 668 "cparser/pre_parser.mly"
    ( match snd x with
      | Decl_ident -> (fst x, Decl_other)
      | _ -> x )
# 4900 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_declarator = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_declare_typename_declarator_ = 
# 225 "cparser/pre_parser.mly"
         ( declare_typename (fst i); i )
# 4925 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_declarator = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_declare_varname_declarator_ = 
# 223 "cparser/pre_parser.mly"
         ( declare_varname (fst i); i )
# 4950 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_declarator_noattrend = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_declare_varname_declarator_noattrend_ = 
# 223 "cparser/pre_parser.mly"
         ( declare_varname (fst i); i )
# 4975 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_enumerator = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_declare_varname_enumerator_ = 
# 223 "cparser/pre_parser.mly"
         ( declare_varname (fst i); i )
# 5000 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5027 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_designator_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_designation = 
# 766 "cparser/pre_parser.mly"
    ()
# 5036 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5069 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _1_inlined1 : 'tv_conditional_expression = Obj.magic _1_inlined1 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5075 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_designator = let _2 =
          let _1 = _1_inlined1 in
          
# 391 "cparser/pre_parser.mly"
    ()
# 5085 "cparser/pre_parser.ml"
          
        in
        
# 775 "cparser/pre_parser.mly"
    ()
# 5091 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5119 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_designator = let _2 = 
# 212 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 5127 "cparser/pre_parser.ml"
         in
        
# 775 "cparser/pre_parser.mly"
    ()
# 5132 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_designator = Obj.magic _2 in
        let _1 : 'tv_option_designator_list_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_designator_list = 
# 770 "cparser/pre_parser.mly"
    ()
# 5164 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5203 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_abstract_declarator_type_name_ = Obj.magic _3 in
        let _2 : 'tv_save_context = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5210 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_direct_abstract_declarator = 
# 752 "cparser/pre_parser.mly"
    ()
# 5218 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_optional_assignment_expression_RBRACK_ = Obj.magic _4 in
        let _3 : 'tv_option_type_qualifier_list_ = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5259 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_option_direct_abstract_declarator_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_direct_abstract_declarator = 
# 752 "cparser/pre_parser.mly"
    ()
# 5268 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5301 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_context_parameter_type_list_ = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5307 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_direct_abstract_declarator = let _1 = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 5315 "cparser/pre_parser.ml"
         in
        
# 752 "cparser/pre_parser.mly"
    ()
# 5320 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5359 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_context_parameter_type_list_ = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5365 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_direct_abstract_declarator = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_direct_abstract_declarator = let _1 = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 5374 "cparser/pre_parser.ml"
         in
        
# 752 "cparser/pre_parser.mly"
    ()
# 5379 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_declarator_identifier = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_direct_declarator = 
# 674 "cparser/pre_parser.mly"
    ( set_id_type i VarId; (i, Decl_ident) )
# 5404 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5443 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let x : 'tv_declarator = Obj.magic x in
        let _2 : 'tv_save_context = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5450 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_direct_declarator = 
# 676 "cparser/pre_parser.mly"
    ( x )
# 5458 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_optional_assignment_expression_RBRACK_ = Obj.magic _4 in
        let _3 : 'tv_option_type_qualifier_list_ = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5499 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_direct_declarator = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_direct_declarator = 
# 678 "cparser/pre_parser.mly"
    ( match snd x with
      | Decl_ident -> (fst x, Decl_other)
      | _ -> x )
# 5510 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ctx;
            MenhirLib.EngineTypes.startp = _startpos_ctx_;
            MenhirLib.EngineTypes.endp = _endpos_ctx_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5549 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let ctx : 'tv_context_parameter_type_list = Obj.magic ctx in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5555 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_direct_declarator = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_direct_declarator = 
# 682 "cparser/pre_parser.mly"
    ( match snd x with
      | Decl_ident -> (fst x, Decl_fun ctx)
      | _ -> x )
# 5566 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = il;
            MenhirLib.EngineTypes.startp = _startpos_il_;
            MenhirLib.EngineTypes.endp = _endpos_il_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5611 "cparser/pre_parser.ml"
        ) = Obj.magic _5 in
        let il : 'tv_option_identifier_list_ = Obj.magic il in
        let _3 : 'tv_save_context = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5618 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_direct_declarator = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_direct_declarator = 
# 686 "cparser/pre_parser.mly"
    ( match snd x, il with
      | Decl_ident, Some il -> (fst x, Decl_krfun il)
      | Decl_ident, None -> (fst x, Decl_krfun [])
      | _ -> x )
# 5630 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ctx;
              MenhirLib.EngineTypes.startp = _startpos_ctx_;
              MenhirLib.EngineTypes.endp = _endpos_ctx_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_statement = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5664 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_do_statement1 = 
# 834 "cparser/pre_parser.mly"
    ( ctx () )
# 5673 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5730 "cparser/pre_parser.ml"
        ) = Obj.magic _7 in
        let _6 : 'tv_option_COMMA_ = Obj.magic _6 in
        let _5 : 'tv_enumerator_list = Obj.magic _5 in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5737 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_other_identifier_ = Obj.magic _3 in
        let _2 : 'tv_attribute_specifier_list = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5744 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_enum_specifier = 
# 551 "cparser/pre_parser.mly"
    ()
# 5752 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _2 : 'tv_attribute_specifier_list = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5787 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_enum_specifier = let _3 = 
# 212 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 5795 "cparser/pre_parser.ml"
         in
        
# 551 "cparser/pre_parser.mly"
    ()
# 5800 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_enumeration_constant = 
# 565 "cparser/pre_parser.mly"
    ( set_id_type i VarId; i )
# 5825 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_enumeration_constant = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_enumerator = 
# 561 "cparser/pre_parser.mly"
    ( (i, ()) )
# 5850 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1 : 'tv_conditional_expression = Obj.magic _1 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5884 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let i : 'tv_enumeration_constant = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_enumerator = let _3 = 
# 391 "cparser/pre_parser.mly"
    ()
# 5893 "cparser/pre_parser.ml"
         in
        
# 561 "cparser/pre_parser.mly"
    ( (i, ()) )
# 5898 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_declare_varname_enumerator_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_enumerator_list = 
# 556 "cparser/pre_parser.mly"
    ()
# 5923 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_declare_varname_enumerator_ = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 5957 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_enumerator_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_enumerator_list = 
# 556 "cparser/pre_parser.mly"
    ()
# 5966 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_relational_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_equality_expression = 
# 333 "cparser/pre_parser.mly"
    ()
# 5991 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_relational_expression = Obj.magic _3 in
        let _2 : 'tv_equality_operator = Obj.magic _2 in
        let _1 : 'tv_equality_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_equality_expression = 
# 333 "cparser/pre_parser.mly"
    ()
# 6030 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6051 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_equality_operator = 
# 328 "cparser/pre_parser.mly"
             ()
# 6059 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6080 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_equality_operator = 
# 328 "cparser/pre_parser.mly"
             ()
# 6088 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_and_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_exclusive_or_expression = 
# 343 "cparser/pre_parser.mly"
    ()
# 6113 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_and_expression = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6147 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_exclusive_or_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_exclusive_or_expression = 
# 343 "cparser/pre_parser.mly"
    ()
# 6156 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_assignment_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_expression = 
# 387 "cparser/pre_parser.mly"
    ()
# 6181 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_assignment_expression = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6215 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_expression = 
# 387 "cparser/pre_parser.mly"
    ()
# 6224 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6251 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_option_expression_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_expression_statement = 
# 809 "cparser/pre_parser.mly"
    ()
# 6260 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_optional_expression_SEMICOLON_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_for_statement_header = 
# 845 "cparser/pre_parser.mly"
    ()
# 6285 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_declaration_block_item_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_for_statement_header = 
# 845 "cparser/pre_parser.mly"
    ()
# 6310 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ctx;
            MenhirLib.EngineTypes.startp = _startpos_ctx_;
            MenhirLib.EngineTypes.endp = _endpos_ctx_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_compound_statement = Obj.magic _2 in
        let ctx : 'tv_function_definition1 = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_function_definition = 
# 930 "cparser/pre_parser.mly"
    ( ctx () )
# 6342 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ctx;
          MenhirLib.EngineTypes.startp = _startpos_ctx_;
          MenhirLib.EngineTypes.endp = _endpos_ctx_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = func;
                MenhirLib.EngineTypes.startp = _startpos_func_;
                MenhirLib.EngineTypes.endp = _endpos_func_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _4 : 'tv_attribute_specifier_list = Obj.magic _4 in
        let _3 : 'tv_save_context = Obj.magic _3 in
        let func : 'tv_declare_varname_declarator_noattrend_ = Obj.magic func in
        let _1 : 'tv_declaration_specifiers_declaration_external_declaration__ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ctx_ in
        let _v : 'tv_function_definition1 = 
# 921 "cparser/pre_parser.mly"
    ( begin match snd func with
      | Decl_fun ctx -> ctx (); declare_varname (fst func)
      | Decl_krfun il -> List.iter declare_varname il
      | _ -> ()
      end;
      ctx )
# 6400 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ctx;
            MenhirLib.EngineTypes.startp = _startpos_ctx_;
            MenhirLib.EngineTypes.endp = _endpos_ctx_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = func;
              MenhirLib.EngineTypes.startp = _startpos_func_;
              MenhirLib.EngineTypes.endp = _endpos_func_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_declaration_list = Obj.magic _4 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let func : 'tv_declare_varname_declarator_noattrend_ = Obj.magic func in
        let _1 : 'tv_declaration_specifiers_declaration_external_declaration__ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_function_definition1 = 
# 921 "cparser/pre_parser.mly"
    ( begin match snd func with
      | Decl_fun ctx -> ctx (); declare_varname (fst func)
      | Decl_krfun il -> List.iter declare_varname il
      | _ -> ()
      end;
      ctx )
# 6451 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6472 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_function_specifier = 
# 619 "cparser/pre_parser.mly"
    ()
# 6480 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6501 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_function_specifier = 
# 619 "cparser/pre_parser.mly"
    ()
# 6509 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_gcc_attribute = 
# 599 "cparser/pre_parser.mly"
    ()
# 6527 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_gcc_attribute_word = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_gcc_attribute = 
# 599 "cparser/pre_parser.mly"
    ()
# 6552 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6591 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_argument_expression_list_ = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6597 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_gcc_attribute_word = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_gcc_attribute = 
# 599 "cparser/pre_parser.mly"
    ()
# 6606 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = i;
                MenhirLib.EngineTypes.startp = _startpos_i_;
                MenhirLib.EngineTypes.endp = _endpos_i_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6657 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_argument_expression_list = Obj.magic _5 in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6663 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let i : 'tv_typedef_name = Obj.magic i in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6669 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_gcc_attribute_word = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_gcc_attribute = 
# 604 "cparser/pre_parser.mly"
    ( set_id_type i VarId )
# 6678 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_gcc_attribute = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_gcc_attribute_list = 
# 593 "cparser/pre_parser.mly"
    ()
# 6703 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_gcc_attribute = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6737 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_gcc_attribute_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_gcc_attribute_list = 
# 593 "cparser/pre_parser.mly"
    ()
# 6746 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_gcc_attribute_word = let _1 = 
# 212 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 6771 "cparser/pre_parser.ml"
         in
        
# 610 "cparser/pre_parser.mly"
    ()
# 6776 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6797 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_gcc_attribute_word = 
# 610 "cparser/pre_parser.mly"
    ()
# 6805 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6826 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_gcc_attribute_word = 
# 610 "cparser/pre_parser.mly"
    ()
# 6834 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_typedef_name = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_general_identifier = 
# 203 "cparser/pre_parser.mly"
    ( i )
# 6859 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 46 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 6886 "cparser/pre_parser.ml"
        ) = Obj.magic i in
        let _1 : (
# 45 "cparser/pre_parser.mly"
      (string)
# 6891 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_general_identifier = let i = 
# 198 "cparser/pre_parser.mly"
    ( i )
# 6899 "cparser/pre_parser.ml"
         in
        
# 203 "cparser/pre_parser.mly"
    ( i )
# 6904 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 46 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 6931 "cparser/pre_parser.ml"
        ) = Obj.magic i in
        let _1 : (
# 45 "cparser/pre_parser.mly"
      (string)
# 6936 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_identifier_list = let x = 
# 198 "cparser/pre_parser.mly"
    ( i )
# 6944 "cparser/pre_parser.ml"
         in
        
# 901 "cparser/pre_parser.mly"
    ( [x] )
# 6949 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = l;
                MenhirLib.EngineTypes.startp = _startpos_l_;
                MenhirLib.EngineTypes.endp = _endpos_l_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let i : (
# 46 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 6988 "cparser/pre_parser.ml"
        ) = Obj.magic i in
        let _1 : (
# 45 "cparser/pre_parser.mly"
      (string)
# 6993 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 6998 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let l : 'tv_identifier_list = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_identifier_list = let x = 
# 198 "cparser/pre_parser.mly"
    ( i )
# 7007 "cparser/pre_parser.ml"
         in
        
# 903 "cparser/pre_parser.mly"
    ( x::l )
# 7012 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ctx;
              MenhirLib.EngineTypes.startp = _startpos_ctx_;
              MenhirLib.EngineTypes.endp = _endpos_ctx_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7069 "cparser/pre_parser.ml"
        ) = Obj.magic _7 in
        let _6 : 'tv_statement = Obj.magic _6 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7076 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_expression = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7082 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7087 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_ifelse_statement1 = 
# 824 "cparser/pre_parser.mly"
    ( ctx() )
# 7095 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_exclusive_or_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_inclusive_or_expression = 
# 348 "cparser/pre_parser.mly"
    ()
# 7120 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_exclusive_or_expression = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7154 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_inclusive_or_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_inclusive_or_expression = 
# 348 "cparser/pre_parser.mly"
    ()
# 7163 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_attribute_specifier_list = Obj.magic _3 in
        let _2 : 'tv_save_context = Obj.magic _2 in
        let _1 : 'tv_declare_varname_declarator_noattrend_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_init_declarator = 
# 418 "cparser/pre_parser.mly"
    ()
# 7202 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : 'tv_c_initializer = Obj.magic _5 in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7248 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_attribute_specifier_list = Obj.magic _3 in
        let _2 : 'tv_save_context = Obj.magic _2 in
        let _1 : 'tv_declare_varname_declarator_noattrend_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_init_declarator = 
# 418 "cparser/pre_parser.mly"
    ()
# 7259 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_init_declarator = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_init_declarator_list = 
# 413 "cparser/pre_parser.mly"
    ()
# 7284 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_init_declarator = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7318 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_init_declarator_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_init_declarator_list = 
# 413 "cparser/pre_parser.mly"
    ()
# 7327 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_c_initializer = Obj.magic _2 in
        let _1 : 'tv_option_designation_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_initializer_list = 
# 762 "cparser/pre_parser.mly"
    ()
# 7359 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_c_initializer = Obj.magic _4 in
        let _3 : 'tv_option_designation_ = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7400 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_initializer_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_initializer_list = 
# 762 "cparser/pre_parser.mly"
    ()
# 7409 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ctx;
                    MenhirLib.EngineTypes.startp = _startpos_ctx_;
                    MenhirLib.EngineTypes.endp = _endpos_ctx_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : 'tv_statement = Obj.magic _6 in
        let _5 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7461 "cparser/pre_parser.ml"
        ) = Obj.magic _5 in
        let _4 : 'tv_expression = Obj.magic _4 in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7467 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7472 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_iteration_statement = 
# 840 "cparser/pre_parser.mly"
    ( ctx() )
# 7481 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = ctx;
                      MenhirLib.EngineTypes.startp = _startpos_ctx_;
                      MenhirLib.EngineTypes.endp = _endpos_ctx_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7538 "cparser/pre_parser.ml"
        ) = Obj.magic _7 in
        let _6 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7543 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_expression = Obj.magic _5 in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7549 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7554 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_do_statement1 = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_iteration_statement = 
# 840 "cparser/pre_parser.mly"
    ( ctx() )
# 7564 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = ctx;
                      MenhirLib.EngineTypes.startp = _startpos_ctx_;
                      MenhirLib.EngineTypes.endp = _endpos_ctx_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : 'tv_statement = Obj.magic _7 in
        let _6 : 'tv_optional_expression_RPAREN_ = Obj.magic _6 in
        let _5 : 'tv_optional_expression_SEMICOLON_ = Obj.magic _5 in
        let _4 : 'tv_for_statement_header = Obj.magic _4 in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7625 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7630 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_iteration_statement = 
# 840 "cparser/pre_parser.mly"
    ( ctx() )
# 7639 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7672 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let i : 'tv_general_identifier = Obj.magic i in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7678 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_jump_statement = let _2 = 
# 212 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 7686 "cparser/pre_parser.ml"
         in
        
# 816 "cparser/pre_parser.mly"
    ()
# 7691 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7718 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7723 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_jump_statement = 
# 816 "cparser/pre_parser.mly"
    ()
# 7731 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7758 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7763 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_jump_statement = 
# 816 "cparser/pre_parser.mly"
    ()
# 7771 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7804 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_option_expression_ = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7810 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_jump_statement = 
# 816 "cparser/pre_parser.mly"
    ()
# 7818 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7851 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_option_init_declarator_list_ = Obj.magic _2 in
        let _1 : 'tv_declaration_specifiers_declaration_block_item__ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_kr_param_declaration = 
# 907 "cparser/pre_parser.mly"
    ()
# 7861 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_statement = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7895 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let i : 'tv_general_identifier = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_labeled_statement = let _1 = 
# 212 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 7904 "cparser/pre_parser.ml"
         in
        
# 791 "cparser/pre_parser.mly"
    ()
# 7909 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : 'tv_statement = Obj.magic _4 in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7949 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _1_inlined1 : 'tv_conditional_expression = Obj.magic _1_inlined1 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 7955 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_labeled_statement = let _2 =
          let _1 = _1_inlined1 in
          
# 391 "cparser/pre_parser.mly"
    ()
# 7965 "cparser/pre_parser.ml"
          
        in
        
# 791 "cparser/pre_parser.mly"
    ()
# 7971 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_statement = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8005 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8010 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_labeled_statement = 
# 791 "cparser/pre_parser.mly"
    ()
# 8018 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_list_declaration_specifier_no_type_ = let _1 = 
# 170 "cparser/pre_parser.mly"
              ()
# 8036 "cparser/pre_parser.ml"
         in
        
# 174 "cparser/pre_parser.mly"
              ()
# 8041 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : 'tv_storage_class_specifier_no_typedef = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : 'tv_list_declaration_specifier_no_type_ = let _1 =
          let _2 =
            let _1 = _1_inlined1 in
            
# 443 "cparser/pre_parser.mly"
    ()
# 8076 "cparser/pre_parser.ml"
            
          in
          
# 171 "cparser/pre_parser.mly"
              ()
# 8082 "cparser/pre_parser.ml"
          
        in
        
# 174 "cparser/pre_parser.mly"
              ()
# 8088 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : 'tv_type_qualifier_noattr = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : 'tv_list_declaration_specifier_no_type_ = let _1 =
          let _2 =
            let _1 = _1_inlined1 in
            
# 443 "cparser/pre_parser.mly"
    ()
# 8123 "cparser/pre_parser.ml"
            
          in
          
# 171 "cparser/pre_parser.mly"
              ()
# 8129 "cparser/pre_parser.ml"
          
        in
        
# 174 "cparser/pre_parser.mly"
              ()
# 8135 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : 'tv_function_specifier = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : 'tv_list_declaration_specifier_no_type_ = let _1 =
          let _2 =
            let _1 = _1_inlined1 in
            
# 443 "cparser/pre_parser.mly"
    ()
# 8170 "cparser/pre_parser.ml"
            
          in
          
# 171 "cparser/pre_parser.mly"
              ()
# 8176 "cparser/pre_parser.ml"
          
        in
        
# 174 "cparser/pre_parser.mly"
              ()
# 8182 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : 'tv_attribute_specifier = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_declaration_specifier_no_type_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : 'tv_list_declaration_specifier_no_type_ = let _1 =
          let _2 =
            let _1 = _1_inlined1 in
            
# 443 "cparser/pre_parser.mly"
    ()
# 8217 "cparser/pre_parser.ml"
            
          in
          
# 171 "cparser/pre_parser.mly"
              ()
# 8223 "cparser/pre_parser.ml"
          
        in
        
# 174 "cparser/pre_parser.mly"
              ()
# 8229 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_list_declaration_specifier_no_typedef_name_ = let _1 = 
# 170 "cparser/pre_parser.mly"
              ()
# 8247 "cparser/pre_parser.ml"
         in
        
# 174 "cparser/pre_parser.mly"
              ()
# 8252 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_declaration_specifier_no_typedef_name = Obj.magic _2 in
        let _1 : 'tv_list_declaration_specifier_no_typedef_name_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_list_declaration_specifier_no_typedef_name_ = let _1 = 
# 171 "cparser/pre_parser.mly"
              ()
# 8284 "cparser/pre_parser.ml"
         in
        
# 174 "cparser/pre_parser.mly"
              ()
# 8289 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_list_pointer1_ = let _1 = 
# 170 "cparser/pre_parser.mly"
              ()
# 8307 "cparser/pre_parser.ml"
         in
        
# 174 "cparser/pre_parser.mly"
              ()
# 8312 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _2 : 'tv_option_type_qualifier_list_ = Obj.magic _2 in
        let _1_inlined1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8346 "cparser/pre_parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : 'tv_list_pointer1_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_list_pointer1_ = let _1 =
          let _2 =
            let _1 = _1_inlined1 in
            
# 706 "cparser/pre_parser.mly"
    ()
# 8358 "cparser/pre_parser.ml"
            
          in
          
# 171 "cparser/pre_parser.mly"
              ()
# 8364 "cparser/pre_parser.ml"
          
        in
        
# 174 "cparser/pre_parser.mly"
              ()
# 8370 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_list_specifier_qualifier_no_typedef_name_ = let _1 = 
# 170 "cparser/pre_parser.mly"
              ()
# 8388 "cparser/pre_parser.ml"
         in
        
# 174 "cparser/pre_parser.mly"
              ()
# 8393 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_specifier_qualifier_no_typedef_name = Obj.magic _2 in
        let _1 : 'tv_list_specifier_qualifier_no_typedef_name_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_list_specifier_qualifier_no_typedef_name_ = let _1 = 
# 171 "cparser/pre_parser.mly"
              ()
# 8425 "cparser/pre_parser.ml"
         in
        
# 174 "cparser/pre_parser.mly"
              ()
# 8430 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_list_translation_item_ = let _1 = 
# 170 "cparser/pre_parser.mly"
              ()
# 8448 "cparser/pre_parser.ml"
         in
        
# 174 "cparser/pre_parser.mly"
              ()
# 8453 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_translation_item = Obj.magic _2 in
        let _1 : 'tv_list_translation_item_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_list_translation_item_ = let _1 = 
# 171 "cparser/pre_parser.mly"
              ()
# 8485 "cparser/pre_parser.ml"
         in
        
# 174 "cparser/pre_parser.mly"
              ()
# 8490 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_inclusive_or_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_logical_and_expression = 
# 353 "cparser/pre_parser.mly"
    ()
# 8515 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_inclusive_or_expression = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8549 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_logical_and_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_logical_and_expression = 
# 353 "cparser/pre_parser.mly"
    ()
# 8558 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_logical_and_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_logical_or_expression = 
# 358 "cparser/pre_parser.mly"
    ()
# 8583 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_logical_and_expression = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8617 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_logical_or_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_logical_or_expression = 
# 358 "cparser/pre_parser.mly"
    ()
# 8626 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_low_prec = 
# 650 "cparser/pre_parser.mly"
                          ()
# 8644 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_cast_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_multiplicative_expression = 
# 301 "cparser/pre_parser.mly"
    ()
# 8669 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_cast_expression = Obj.magic _3 in
        let _2 : 'tv_multiplicative_operator = Obj.magic _2 in
        let _1 : 'tv_multiplicative_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_multiplicative_expression = 
# 301 "cparser/pre_parser.mly"
    ()
# 8708 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8729 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_multiplicative_operator = 
# 296 "cparser/pre_parser.mly"
                         ()
# 8737 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8758 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_multiplicative_operator = 
# 296 "cparser/pre_parser.mly"
                         ()
# 8766 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8787 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_multiplicative_operator = 
# 296 "cparser/pre_parser.mly"
                         ()
# 8795 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_COMMA_ = let o = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 8813 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 8818 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 8839 "cparser/pre_parser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_COMMA_ = let o = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 8847 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 8852 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_abstract_declarator_parameter_declaration__ = let o = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 8870 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 8875 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_abstract_declarator_parameter_declaration_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_abstract_declarator_parameter_declaration__ = let o = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 8900 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 8905 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_abstract_declarator_type_name__ = let o = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 8923 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 8928 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_abstract_declarator_type_name_ = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_abstract_declarator_type_name__ = let o = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 8953 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 8958 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_argument_expression_list_ = let o = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 8976 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 8981 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_argument_expression_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_argument_expression_list_ = let o = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 9006 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9011 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_block_item_list_ = let o = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 9029 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9034 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_block_item_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_block_item_list_ = let o = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 9059 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9064 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_context_parameter_type_list_ = let o = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 9082 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9087 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_context_parameter_type_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_context_parameter_type_list_ = let o = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 9112 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9117 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_declarator_ = let o = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 9135 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9140 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_declarator = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_declarator_ = let o = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 9165 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9170 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_designation_ = let o = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 9188 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9193 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_designation = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_designation_ = let o = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 9218 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9223 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_designator_list_ = let o = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 9241 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9246 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_designator_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_designator_list_ = let o = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 9271 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9276 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_direct_abstract_declarator_ = let o = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 9294 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9299 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_direct_abstract_declarator = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_direct_abstract_declarator_ = let o = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 9324 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9329 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_expression_ = let o = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 9347 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9352 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_expression = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_expression_ = let o = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 9377 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9382 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_identifier_list_ = let o = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 9400 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9405 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_identifier_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_identifier_list_ = let o = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 9430 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9435 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_init_declarator_list_ = let o = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 9453 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9458 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_init_declarator_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_init_declarator_list_ = let o = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 9483 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9488 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_other_identifier_ = let o = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 9506 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9511 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_option_other_identifier_ = let o =
          let x = 
# 212 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 9537 "cparser/pre_parser.ml"
           in
          
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 9542 "cparser/pre_parser.ml"
          
        in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9548 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_struct_declarator_list_ = let o = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 9566 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9571 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_struct_declarator_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_struct_declarator_list_ = let o = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 9596 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9601 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_type_qualifier_list_ = let o = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 9619 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9624 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_type_qualifier_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_type_qualifier_list_ = let o = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 9649 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9654 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_option_typedef_declarator_list_ = let o = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 9672 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9677 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : 'tv_typedef_declarator_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_typedef_declarator_list_ = let o = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 9702 "cparser/pre_parser.ml"
         in
        
# 152 "cparser/pre_parser.mly"
    ( o )
# 9707 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 9728 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_optional_assignment_expression_RBRACK_ = let _1 = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 9736 "cparser/pre_parser.ml"
         in
        
# 160 "cparser/pre_parser.mly"
               ()
# 9741 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 9768 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_assignment_expression = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_optional_assignment_expression_RBRACK_ = let _1 = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 9777 "cparser/pre_parser.ml"
         in
        
# 160 "cparser/pre_parser.mly"
               ()
# 9782 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 9803 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_optional_expression_RPAREN_ = let _1 = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 9811 "cparser/pre_parser.ml"
         in
        
# 160 "cparser/pre_parser.mly"
               ()
# 9816 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 9843 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_expression = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_optional_expression_RPAREN_ = let _1 = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 9852 "cparser/pre_parser.ml"
         in
        
# 160 "cparser/pre_parser.mly"
               ()
# 9857 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 9878 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_optional_expression_SEMICOLON_ = let _1 = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 9886 "cparser/pre_parser.ml"
         in
        
# 160 "cparser/pre_parser.mly"
               ()
# 9891 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 9918 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let x : 'tv_expression = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_optional_expression_SEMICOLON_ = let _1 = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 9927 "cparser/pre_parser.ml"
         in
        
# 160 "cparser/pre_parser.mly"
               ()
# 9932 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_declare_varname_declarator_ = Obj.magic _2 in
        let _1 : 'tv_declaration_specifiers_parameter_declaration_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_parameter_declaration = 
# 733 "cparser/pre_parser.mly"
    ()
# 9964 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_option_abstract_declarator_parameter_declaration__ = Obj.magic _2 in
        let _1 : 'tv_declaration_specifiers_parameter_declaration_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_parameter_declaration = 
# 733 "cparser/pre_parser.mly"
    ()
# 9996 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_parameter_declaration = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_parameter_list = 
# 728 "cparser/pre_parser.mly"
    ()
# 10021 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_parameter_declaration = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10055 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_parameter_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_parameter_list = 
# 728 "cparser/pre_parser.mly"
    ()
# 10064 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_parameter_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_parameter_type_list = 
# 723 "cparser/pre_parser.mly"
    ()
# 10089 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10122 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10127 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_parameter_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_parameter_type_list = 
# 723 "cparser/pre_parser.mly"
    ()
# 10136 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_primary_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_postfix_expression = 
# 264 "cparser/pre_parser.mly"
    ()
# 10161 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10200 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_expression = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10206 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expression = 
# 264 "cparser/pre_parser.mly"
    ()
# 10215 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10254 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_argument_expression_list_ = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10260 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expression = 
# 264 "cparser/pre_parser.mly"
    ()
# 10269 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10320 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_type_name = Obj.magic _5 in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10326 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_assignment_expression = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10332 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10337 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_postfix_expression = 
# 264 "cparser/pre_parser.mly"
    ()
# 10345 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10396 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let i : 'tv_general_identifier = Obj.magic i in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10402 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_type_name = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10408 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10413 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_postfix_expression = let _5 = 
# 212 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 10421 "cparser/pre_parser.ml"
         in
        
# 264 "cparser/pre_parser.mly"
    ()
# 10426 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10483 "cparser/pre_parser.ml"
        ) = Obj.magic _7 in
        let _6 : 'tv_designator_list = Obj.magic _6 in
        let i : 'tv_general_identifier = Obj.magic i in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10490 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_type_name = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10496 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10501 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_postfix_expression = let _5 = 
# 212 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 10509 "cparser/pre_parser.ml"
         in
        
# 264 "cparser/pre_parser.mly"
    ()
# 10514 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10548 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_postfix_expression = let _3 = 
# 212 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 10557 "cparser/pre_parser.ml"
         in
        
# 264 "cparser/pre_parser.mly"
    ()
# 10562 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10596 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_postfix_expression = let _3 = 
# 212 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 10605 "cparser/pre_parser.ml"
         in
        
# 264 "cparser/pre_parser.mly"
    ()
# 10610 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10637 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expression = 
# 264 "cparser/pre_parser.mly"
    ()
# 10646 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10673 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expression = 
# 264 "cparser/pre_parser.mly"
    ()
# 10682 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10739 "cparser/pre_parser.ml"
        ) = Obj.magic _7 in
        let _6 : 'tv_option_COMMA_ = Obj.magic _6 in
        let _5 : 'tv_initializer_list = Obj.magic _5 in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10746 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10751 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_type_name = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10757 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_postfix_expression = 
# 264 "cparser/pre_parser.mly"
    ()
# 10765 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 46 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 10792 "cparser/pre_parser.ml"
        ) = Obj.magic i in
        let _1 : (
# 45 "cparser/pre_parser.mly"
      (string)
# 10797 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_primary_expression = let _1 = 
# 198 "cparser/pre_parser.mly"
    ( i )
# 10805 "cparser/pre_parser.ml"
         in
        
# 250 "cparser/pre_parser.mly"
    ()
# 10810 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 48 "cparser/pre_parser.mly"
      (Cabs.constant * Cabs.loc)
# 10831 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expression = 
# 250 "cparser/pre_parser.mly"
    ()
# 10839 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_string_literals_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expression = 
# 250 "cparser/pre_parser.mly"
    ()
# 10864 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10897 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_expression = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10903 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_primary_expression = 
# 250 "cparser/pre_parser.mly"
    ()
# 10911 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_shift_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_relational_expression = 
# 325 "cparser/pre_parser.mly"
    ()
# 10936 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_shift_expression = Obj.magic _3 in
        let _2 : 'tv_relational_operator = Obj.magic _2 in
        let _1 : 'tv_relational_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_relational_expression = 
# 325 "cparser/pre_parser.mly"
    ()
# 10975 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 10996 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_relational_operator = 
# 320 "cparser/pre_parser.mly"
                      ()
# 11004 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11025 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_relational_operator = 
# 320 "cparser/pre_parser.mly"
                      ()
# 11033 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11054 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_relational_operator = 
# 320 "cparser/pre_parser.mly"
                      ()
# 11062 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11083 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_relational_operator = 
# 320 "cparser/pre_parser.mly"
                      ()
# 11091 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_storage_class_specifier_no_typedef = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_rlist_declaration_specifier_no_type_ = let _1 = 
# 443 "cparser/pre_parser.mly"
    ()
# 11116 "cparser/pre_parser.ml"
         in
        
# 179 "cparser/pre_parser.mly"
              ()
# 11121 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_type_qualifier_noattr = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_rlist_declaration_specifier_no_type_ = let _1 = 
# 443 "cparser/pre_parser.mly"
    ()
# 11146 "cparser/pre_parser.ml"
         in
        
# 179 "cparser/pre_parser.mly"
              ()
# 11151 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_function_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_rlist_declaration_specifier_no_type_ = let _1 = 
# 443 "cparser/pre_parser.mly"
    ()
# 11176 "cparser/pre_parser.ml"
         in
        
# 179 "cparser/pre_parser.mly"
              ()
# 11181 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_attribute_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_rlist_declaration_specifier_no_type_ = let _1 = 
# 443 "cparser/pre_parser.mly"
    ()
# 11206 "cparser/pre_parser.ml"
         in
        
# 179 "cparser/pre_parser.mly"
              ()
# 11211 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic _2 in
        let _1 : 'tv_storage_class_specifier_no_typedef = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_rlist_declaration_specifier_no_type_ = let _1 = 
# 443 "cparser/pre_parser.mly"
    ()
# 11243 "cparser/pre_parser.ml"
         in
        
# 180 "cparser/pre_parser.mly"
              ()
# 11248 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic _2 in
        let _1 : 'tv_type_qualifier_noattr = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_rlist_declaration_specifier_no_type_ = let _1 = 
# 443 "cparser/pre_parser.mly"
    ()
# 11280 "cparser/pre_parser.ml"
         in
        
# 180 "cparser/pre_parser.mly"
              ()
# 11285 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic _2 in
        let _1 : 'tv_function_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_rlist_declaration_specifier_no_type_ = let _1 = 
# 443 "cparser/pre_parser.mly"
    ()
# 11317 "cparser/pre_parser.ml"
         in
        
# 180 "cparser/pre_parser.mly"
              ()
# 11322 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_rlist_declaration_specifier_no_type_ = Obj.magic _2 in
        let _1 : 'tv_attribute_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_rlist_declaration_specifier_no_type_ = let _1 = 
# 443 "cparser/pre_parser.mly"
    ()
# 11354 "cparser/pre_parser.ml"
         in
        
# 180 "cparser/pre_parser.mly"
              ()
# 11359 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_save_context = 
# 220 "cparser/pre_parser.mly"
              ( !save_context () )
# 11377 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ctx;
              MenhirLib.EngineTypes.startp = _startpos_ctx_;
              MenhirLib.EngineTypes.endp = _endpos_ctx_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_statement = Obj.magic _3 in
        let _2 : 'tv_ifelse_statement1 = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_selection_statement = 
# 830 "cparser/pre_parser.mly"
    ( ctx() )
# 11416 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = ctx;
                      MenhirLib.EngineTypes.startp = _startpos_ctx_;
                      MenhirLib.EngineTypes.endp = _endpos_ctx_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : 'tv_statement = Obj.magic _7 in
        let _6 : 'tv_save_context = Obj.magic _6 in
        let _5 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11475 "cparser/pre_parser.ml"
        ) = Obj.magic _5 in
        let _4 : 'tv_expression = Obj.magic _4 in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11481 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11486 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_selection_statement = 
# 830 "cparser/pre_parser.mly"
    ( ctx() )
# 11495 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ctx;
                    MenhirLib.EngineTypes.startp = _startpos_ctx_;
                    MenhirLib.EngineTypes.endp = _endpos_ctx_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : 'tv_statement = Obj.magic _6 in
        let _5 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11547 "cparser/pre_parser.ml"
        ) = Obj.magic _5 in
        let _4 : 'tv_expression = Obj.magic _4 in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11553 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11558 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let ctx : 'tv_save_context = Obj.magic ctx in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ctx_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_selection_statement = 
# 830 "cparser/pre_parser.mly"
    ( ctx() )
# 11567 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_additive_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_shift_expression = 
# 317 "cparser/pre_parser.mly"
    ()
# 11592 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_additive_expression = Obj.magic _3 in
        let _2 : 'tv_shift_operator = Obj.magic _2 in
        let _1 : 'tv_shift_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_shift_expression = 
# 317 "cparser/pre_parser.mly"
    ()
# 11631 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11652 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_shift_operator = 
# 312 "cparser/pre_parser.mly"
               ()
# 11660 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 11681 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_shift_operator = 
# 312 "cparser/pre_parser.mly"
               ()
# 11689 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_option_type_qualifier_list_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_specifier_qualifier_list_struct_declaration_ = let _1 = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 11721 "cparser/pre_parser.ml"
         in
        
# 531 "cparser/pre_parser.mly"
    ()
# 11726 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_option_type_qualifier_list_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let x : 'tv_type_qualifier_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_specifier_qualifier_list_struct_declaration_ = let _1 = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 11765 "cparser/pre_parser.ml"
         in
        
# 531 "cparser/pre_parser.mly"
    ()
# 11770 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_specifier_qualifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_specifier_qualifier_list_struct_declaration_ = let _1 = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 11802 "cparser/pre_parser.ml"
         in
        
# 531 "cparser/pre_parser.mly"
    ()
# 11807 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_specifier_qualifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let x : 'tv_type_qualifier_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_specifier_qualifier_list_struct_declaration_ = let _1 = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 11846 "cparser/pre_parser.ml"
         in
        
# 531 "cparser/pre_parser.mly"
    ()
# 11851 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_option_type_qualifier_list_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_specifier_qualifier_list_type_name_ = let _1 = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 11883 "cparser/pre_parser.ml"
         in
        
# 531 "cparser/pre_parser.mly"
    ()
# 11888 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_option_type_qualifier_list_ = Obj.magic _3 in
        let _2 : 'tv_typedef_name = Obj.magic _2 in
        let x : 'tv_type_qualifier_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_specifier_qualifier_list_type_name_ = let _1 = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 11927 "cparser/pre_parser.ml"
         in
        
# 531 "cparser/pre_parser.mly"
    ()
# 11932 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : 'tv_list_specifier_qualifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_specifier_qualifier_list_type_name_ = let _1 = 
# 146 "cparser/pre_parser.mly"
    ( None )
# 11964 "cparser/pre_parser.ml"
         in
        
# 531 "cparser/pre_parser.mly"
    ()
# 11969 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_list_specifier_qualifier_no_typedef_name_ = Obj.magic _3 in
        let _2 : 'tv_type_specifier_no_typedef_name = Obj.magic _2 in
        let x : 'tv_type_qualifier_list = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_specifier_qualifier_list_type_name_ = let _1 = 
# 148 "cparser/pre_parser.mly"
    ( Some x )
# 12008 "cparser/pre_parser.ml"
         in
        
# 531 "cparser/pre_parser.mly"
    ()
# 12013 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_type_specifier_no_typedef_name = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_specifier_qualifier_no_typedef_name = 
# 536 "cparser/pre_parser.mly"
    ()
# 12038 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_type_qualifier_noattr = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_specifier_qualifier_no_typedef_name = let _1 = 
# 576 "cparser/pre_parser.mly"
    ()
# 12063 "cparser/pre_parser.ml"
         in
        
# 536 "cparser/pre_parser.mly"
    ()
# 12068 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_attribute_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_specifier_qualifier_no_typedef_name = let _1 = 
# 576 "cparser/pre_parser.mly"
    ()
# 12093 "cparser/pre_parser.ml"
         in
        
# 536 "cparser/pre_parser.mly"
    ()
# 12098 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_labeled_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 785 "cparser/pre_parser.mly"
    ()
# 12123 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_compound_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 785 "cparser/pre_parser.mly"
    ()
# 12148 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_expression_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 785 "cparser/pre_parser.mly"
    ()
# 12173 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_selection_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 785 "cparser/pre_parser.mly"
    ()
# 12198 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_iteration_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 785 "cparser/pre_parser.mly"
    ()
# 12223 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_jump_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 785 "cparser/pre_parser.mly"
    ()
# 12248 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_asm_statement = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 785 "cparser/pre_parser.mly"
    ()
# 12273 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12330 "cparser/pre_parser.ml"
        ) = Obj.magic _7 in
        let _6 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12335 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_string_literals_list = Obj.magic _5 in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12341 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _1_inlined1 : 'tv_conditional_expression = Obj.magic _1_inlined1 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12347 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12352 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_static_assert_declaration = let _3 =
          let _1 = _1_inlined1 in
          
# 391 "cparser/pre_parser.mly"
    ()
# 12362 "cparser/pre_parser.ml"
          
        in
        
# 614 "cparser/pre_parser.mly"
    ()
# 12368 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12389 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_storage_class_specifier_no_typedef = 
# 434 "cparser/pre_parser.mly"
    ()
# 12397 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12418 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_storage_class_specifier_no_typedef = 
# 434 "cparser/pre_parser.mly"
    ()
# 12426 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12447 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_storage_class_specifier_no_typedef = 
# 434 "cparser/pre_parser.mly"
    ()
# 12455 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12476 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_storage_class_specifier_no_typedef = 
# 434 "cparser/pre_parser.mly"
    ()
# 12484 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 49 "cparser/pre_parser.mly"
      (bool * int64 list * Cabs.loc)
# 12505 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_string_literals_list = 
# 217 "cparser/pre_parser.mly"
    ()
# 12513 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 49 "cparser/pre_parser.mly"
      (bool * int64 list * Cabs.loc)
# 12540 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_string_literals_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_string_literals_list = 
# 217 "cparser/pre_parser.mly"
    ()
# 12549 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12582 "cparser/pre_parser.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_option_struct_declarator_list_ = Obj.magic _2 in
        let _1 : 'tv_specifier_qualifier_list_struct_declaration_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_struct_declaration = 
# 523 "cparser/pre_parser.mly"
    ()
# 12592 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_static_assert_declaration = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_declaration = 
# 523 "cparser/pre_parser.mly"
    ()
# 12617 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : 'tv_struct_declaration_list = 
# 518 "cparser/pre_parser.mly"
    ()
# 12635 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_struct_declaration = Obj.magic _2 in
        let _1 : 'tv_struct_declaration_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_struct_declaration_list = 
# 518 "cparser/pre_parser.mly"
    ()
# 12667 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_declarator = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_declarator = 
# 546 "cparser/pre_parser.mly"
    ()
# 12692 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : 'tv_conditional_expression = Obj.magic _1_inlined1 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12726 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_option_declarator_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : 'tv_struct_declarator = let _3 =
          let _1 = _1_inlined1 in
          
# 391 "cparser/pre_parser.mly"
    ()
# 12737 "cparser/pre_parser.ml"
          
        in
        
# 546 "cparser/pre_parser.mly"
    ()
# 12743 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_struct_declarator = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_declarator_list = 
# 541 "cparser/pre_parser.mly"
    ()
# 12768 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_struct_declarator = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12802 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_struct_declarator_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_struct_declarator_list = 
# 541 "cparser/pre_parser.mly"
    ()
# 12811 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12832 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_or_union = 
# 513 "cparser/pre_parser.mly"
    ()
# 12840 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12861 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_or_union = 
# 513 "cparser/pre_parser.mly"
    ()
# 12869 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12920 "cparser/pre_parser.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_struct_declaration_list = Obj.magic _5 in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 12926 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_other_identifier_ = Obj.magic _3 in
        let _2 : 'tv_attribute_specifier_list = Obj.magic _2 in
        let _1 : 'tv_struct_or_union = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_struct_or_union_specifier = 
# 508 "cparser/pre_parser.mly"
    ()
# 12937 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let i : 'tv_general_identifier = Obj.magic i in
        let _2 : 'tv_attribute_specifier_list = Obj.magic _2 in
        let _1 : 'tv_struct_or_union = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_struct_or_union_specifier = let _3 = 
# 212 "cparser/pre_parser.mly"
    ( set_id_type i OtherId )
# 12976 "cparser/pre_parser.ml"
         in
        
# 508 "cparser/pre_parser.mly"
    ()
# 12981 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_function_definition = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_translation_item = let _1 = 
# 897 "cparser/pre_parser.mly"
    ()
# 13006 "cparser/pre_parser.ml"
         in
        
# 891 "cparser/pre_parser.mly"
    ()
# 13011 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_declaration_external_declaration_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_translation_item = let _1 = 
# 897 "cparser/pre_parser.mly"
    ()
# 13036 "cparser/pre_parser.ml"
         in
        
# 891 "cparser/pre_parser.mly"
    ()
# 13041 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 50 "cparser/pre_parser.mly"
      (string * Cabs.loc)
# 13062 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_translation_item = let _1 = 
# 897 "cparser/pre_parser.mly"
    ()
# 13070 "cparser/pre_parser.ml"
         in
        
# 891 "cparser/pre_parser.mly"
    ()
# 13075 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13096 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_translation_item = 
# 891 "cparser/pre_parser.mly"
    ()
# 13104 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : 'tv_list_translation_item_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 81 "cparser/pre_parser.mly"
      (unit)
# 13136 "cparser/pre_parser.ml"
        ) = 
# 886 "cparser/pre_parser.mly"
    ()
# 13140 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_option_abstract_declarator_type_name__ = Obj.magic _2 in
        let _1 : 'tv_specifier_qualifier_list_type_name_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_type_name = 
# 737 "cparser/pre_parser.mly"
    ()
# 13172 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : 'tv_type_qualifier_noattr = Obj.magic _1_inlined1 in
        let _1 : 'tv_option_type_qualifier_list_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : 'tv_type_qualifier_list = let _2 =
          let _1 = _1_inlined1 in
          
# 576 "cparser/pre_parser.mly"
    ()
# 13206 "cparser/pre_parser.ml"
          
        in
        
# 714 "cparser/pre_parser.mly"
    ()
# 13212 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : 'tv_attribute_specifier = Obj.magic _1_inlined1 in
        let _1 : 'tv_option_type_qualifier_list_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : 'tv_type_qualifier_list = let _2 =
          let _1 = _1_inlined1 in
          
# 576 "cparser/pre_parser.mly"
    ()
# 13246 "cparser/pre_parser.ml"
          
        in
        
# 714 "cparser/pre_parser.mly"
    ()
# 13252 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13273 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_qualifier_noattr = 
# 571 "cparser/pre_parser.mly"
    ()
# 13281 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13302 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_qualifier_noattr = 
# 571 "cparser/pre_parser.mly"
    ()
# 13310 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13331 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_qualifier_noattr = 
# 571 "cparser/pre_parser.mly"
    ()
# 13339 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13360 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 503 "cparser/pre_parser.mly"
    ()
# 13368 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13389 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 503 "cparser/pre_parser.mly"
    ()
# 13397 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13418 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 503 "cparser/pre_parser.mly"
    ()
# 13426 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13447 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 503 "cparser/pre_parser.mly"
    ()
# 13455 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13476 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 503 "cparser/pre_parser.mly"
    ()
# 13484 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13505 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 503 "cparser/pre_parser.mly"
    ()
# 13513 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13534 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 503 "cparser/pre_parser.mly"
    ()
# 13542 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13563 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 503 "cparser/pre_parser.mly"
    ()
# 13571 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13592 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 503 "cparser/pre_parser.mly"
    ()
# 13600 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13621 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 503 "cparser/pre_parser.mly"
    ()
# 13629 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_struct_or_union_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 503 "cparser/pre_parser.mly"
    ()
# 13654 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_enum_specifier = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_specifier_no_typedef_name = 
# 503 "cparser/pre_parser.mly"
    ()
# 13679 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_declare_typename_declarator_ = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_typedef_declarator = 
# 427 "cparser/pre_parser.mly"
    ()
# 13704 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_typedef_declarator = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_typedef_declarator_list = 
# 423 "cparser/pre_parser.mly"
    ()
# 13729 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : 'tv_typedef_declarator = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13763 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_typedef_declarator_list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_typedef_declarator_list = 
# 423 "cparser/pre_parser.mly"
    ()
# 13772 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 46 "cparser/pre_parser.mly"
      (string * Pre_parser_aux.identifier_type ref * Cabs.loc)
# 13799 "cparser/pre_parser.ml"
        ) = Obj.magic i in
        let _1 : (
# 45 "cparser/pre_parser.mly"
      (string)
# 13804 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_typedef_name = 
# 194 "cparser/pre_parser.mly"
    ( i )
# 13812 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : 'tv_postfix_expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_expression = 
# 279 "cparser/pre_parser.mly"
    ()
# 13837 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_unary_expression = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13865 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expression = 
# 279 "cparser/pre_parser.mly"
    ()
# 13873 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_unary_expression = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13901 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expression = 
# 279 "cparser/pre_parser.mly"
    ()
# 13909 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_cast_expression = Obj.magic _2 in
        let _1 : 'tv_unary_operator = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expression = 
# 279 "cparser/pre_parser.mly"
    ()
# 13941 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : 'tv_unary_expression = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 13969 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expression = 
# 279 "cparser/pre_parser.mly"
    ()
# 13977 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14016 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_type_name = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14022 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14027 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_unary_expression = 
# 279 "cparser/pre_parser.mly"
    ()
# 14035 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14074 "cparser/pre_parser.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_type_name = Obj.magic _3 in
        let _2 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14080 "cparser/pre_parser.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14085 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_unary_expression = 
# 279 "cparser/pre_parser.mly"
    ()
# 14093 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14114 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_operator = 
# 288 "cparser/pre_parser.mly"
    ()
# 14122 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14143 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_operator = 
# 288 "cparser/pre_parser.mly"
    ()
# 14151 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14172 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_operator = 
# 288 "cparser/pre_parser.mly"
    ()
# 14180 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14201 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_operator = 
# 288 "cparser/pre_parser.mly"
    ()
# 14209 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14230 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_operator = 
# 288 "cparser/pre_parser.mly"
    ()
# 14238 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 52 "cparser/pre_parser.mly"
      (Cabs.loc)
# 14259 "cparser/pre_parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_operator = 
# 288 "cparser/pre_parser.mly"
    ()
# 14267 "cparser/pre_parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
    |]
  
  and trace =
    None
  
end

module MenhirInterpreter = struct
  
  module ET = MenhirLib.TableInterpreter.MakeEngineTable (Tables)
  
  module TI = MenhirLib.Engine.Make (ET)
  
  include TI
  
end

let translation_unit_file =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 0 lexer lexbuf) : (
# 81 "cparser/pre_parser.mly"
      (unit)
# 14298 "cparser/pre_parser.ml"
    ))

module Incremental = struct
  
  let translation_unit_file =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 0 initial_position) : (
# 81 "cparser/pre_parser.mly"
      (unit)
# 14308 "cparser/pre_parser.ml"
      ) MenhirInterpreter.checkpoint)
  
end
